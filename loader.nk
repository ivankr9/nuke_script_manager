set cut_paste_input [stack 0]
version 9.0 v8
push $cut_paste_input
NoOp {
 name BG
 tile_color 0x394d3aff
 label "\[value set_folder_with_exr]"
 note_font_size 16
 selected true
 xpos 45
 ypos -793
 addUserKnob {20 User}
 addUserKnob {2 set_folder_with_exr}
 set_folder_with_exr //dataserver/Project/MALYSH/scenes/ep101/ep101sc28/compose/sequence/bgRL/
 addUserKnob {22 LOAD_Sequence T "import os\ndef getFirstNumFrameFile(filename):\n    numer = 0\n    firstframe = ''\n    for ch in filename\[::-1]:\n        if numer == 0 or ch.isdigit():\n            if ch.isdigit():\n                firstframe = ch + firstframe\n                numer = 1\n        else:\n            break        \n    return firstframe\n\ndef deletePadding_seq(f,n=4):\n    newname = ''\n    number = ''\n    i = 0\n    for char in f\[::-1]:\n        if char.isdigit():\n            number += char\n            i+=1\n        if i == n:\n            break\n    number = number\[::-1]\n    return f.replace(number,'')\n\ndef LoadSequenceFromDir(directory,endfile):\n    readers = \[]\n    with nuke.root().begin():\n        files = os.listdir(directory)\n        count = 1\n        counts = \[]\n        sequences = \[]\n        WithoutDigitName = ''\n        seqfiles = \[]\n        for f in sorted(files):\n            if endfile == f\[-3:]:\n                #WithoutDigitName = ''.join(\[i for i in f if not i.isdigit()])\n                WithoutDigitName = deletePadding_seq(f)\n                if WithoutDigitName not in  sequences:\n                    print WithoutDigitName\n                    if len(sequences) > 0:\n                        count = 1\n                    sequences.append(WithoutDigitName)\n                    seqfiles.append(f)\n                    counts.append(count)\n                else:\n                    count += 1\n                    counts.append(count)\n        if len(counts) > 0:\n            numberofframes = max(counts)\n            for seqF in seqfiles:\n                firstFrame = getFirstNumFrameFile(seqF)\n                intFF = int(firstFrame)\n                intLF = int(firstFrame)+(numberofframes-1)\n                padding = len(firstFrame)\n                read = nuke.createNode('Read')\n                read\['file'].fromUserText(directory+'/'+seqF.replace(firstFrame,'%0'+str(padding)+'d'))\n                read\['first'].setValue(intFF)\n                read\['last'].setValue(intLF)\n                readers.append(read)\n    return readers\n#node = nuke.toNode('Load_sequences_from_dir')\nnode = nuke.thisNode()\nNODENAME = node.name()\nroot = nuke.Root()\nroot.begin()\n\ndirectory = node.knob('set_folder_with_exr').value()\nxp = node.xpos()\nyp = node.ypos()\nendfile='exr'\nif directory\[-3:] == endfile:\n    directory = '/'.join(directory.split('/')\[:-1])\nnode.knob('set_folder_with_exr').setValue(directory)\nreaders = LoadSequenceFromDir(directory,endfile)\nps = 1\nexl = \['ryptomatt','custom','geometry']\nread_final = None\nfor r in readers:\n    file = r.knob('file').value()\n    filename = file.split('/')\[-1]\n    expr = \"\[value \"+NODENAME+\".set_folder_with_exr]\"\n    new_file = expr + '/' + filename\n    print new_file\n    r.knob('file').setValue(new_file)\n    if exl\[0] not in file and exl\[1] not in file and exl\[2] not in file:\n        read_final = r\n    yp+=80\n    r.setXYpos(xp,yp)\n    r.knob('postage_stamp').setValue(0)\n    r.setSelected(1)\ng = nuke.createNode(\"Merge2\")\ng\[\"operation\"].setValue(\"plus\")\ng\[\"metainput\"].setValue(\"All\")\ng\[\"also_merge\"].setValue(\"all\")\ng\[\"Achannels\"].setValue(\"none\")\ng.setXYpos(xp+100,yp+100)\ng.setName('ALL_PASSES')\nn = nuke.createNode(\"PostageStamp\")\nn.connectInput(0,read_final)\nn.setXYpos(xp-100,yp+100)\nn.setName('Final')" +STARTLINE}
}
