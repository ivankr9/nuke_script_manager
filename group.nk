set cut_paste_input [stack 0]
version 9.0 v8
Group {
 inputs 0
 name Manager
 tile_color 0xb7ffff
 label "\n\n\n\n\n_\n"
 selected true
 xpos -86
 ypos -14
 addUserKnob {20 script_tab l "Script Management"}
 addUserKnob {1 searchtext l Search: t "Use <;> for add search pattern, use <^> for exclude operator"}
 addUserKnob {22 search_btn l "Search / ViewRecent (byDate)" -STARTLINE T "nuke.thisNode()\['sortbyID'].setValue(0)\ncode = nuke.thisNode()\['code'].getText()\nexec(code)\nsearchListScriptManager()"}
 addUserKnob {22 search2 l "Search / View (byID)" -STARTLINE T "nuke.thisNode()\['sortbyID'].setValue(1)\ncode = nuke.thisNode()\['code'].getText()\nexec(code)\nsearchListScriptManager()"}
 addUserKnob {26 h44 l "" +STARTLINE T ""}
 addUserKnob {20 searchpref l "Search Prefs:" n 1}
 searchpref 0
 addUserKnob {1 startdate l "Start Date" t "For search with date use stamp 'dd.mm.yyyy' Example:\n20.10.2017"}
 addUserKnob {1 enddate l "End Date" t "For search with date use stamp 'dd.mm.yyyy' Example:\n20.10.2017" -STARTLINE}
 addUserKnob {3 maxitems l "  Max Items:" -STARTLINE}
 maxitems 75
 addUserKnob {6 sortmy l "Show Only My Operations   " +STARTLINE}
 addUserKnob {6 showallop l "Hide Repetitions" -STARTLINE}
 showallop true
 addUserKnob {6 sortbyID l "Sort by ID   " -STARTLINE}
 addUserKnob {6 sortepid l "Sort by epID   " -STARTLINE}
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 h1 l "" +STARTLINE T "ChangesList for use - TrippleClickToLine in text and Copy to BufferLine <ctrl+c>:        "}
 addUserKnob {1 Project l "                 Current Project:" -STARTLINE}
 Project 03_MALYSH
 addUserKnob {22 ChangeProject l "Set Project" -STARTLINE T "code = nuke.thisNode()\['code'].getText()\nexec(code)\npanelGetProject(1)"}
 addUserKnob {43 last_changes_list l "" +STARTLINE}
 last_changes_list "0000|30.06.2020|23:54|0000 \t32.04 \tep32sc04_v008.nk \t@aminov_k CREATED_AVI\r\n0000|30.06.2020|19:48|0000 \t32.03 \tep32sc03_v023.nk \t@aminov_k CREATED_AVI\r\n0000|30.06.2020|18:24|0000 \t32.02 \tep32sc02_v010.nk \t@aminov_k CREATED_AVI\r\n0000|30.06.2020|16:22|0000 \t101.28 \tep101sc28_v001.nk \t@luzin_s CREATED_AVI\r\n0000|30.06.2020|16:16|0000 \t101.27 \tep101sc27_v001.nk \t@luzin_s CREATED_AVI\r\n0000|30.06.2020|15:23|0000 \t101.25 \tep101sc25_v001.nk \t@luzin_s CREATED_AVI\r\n0000|30.06.2020|15:23|0000 \t101.26 \tep101sc26_v001.nk \t@luzin_s CREATED_AVI\r\n0000|30.06.2020|10:40|0000 \t36.04 \tep36sc04_v001.nk \t@naumova_d OPEN\r\n0000|30.06.2020|09:35|0000 \t101.23 \tep101sc23_v001.nk \t@luzin_s CREATED_AVI\r\n0000|30.06.2020|08:40|0000 \t101.24 \tep101sc24_v001.nk \t@luzin_s CREATED_AVI\r\n0000|30.06.2020|08:25|0000 \t101.22 \tep101sc22_v001.nk \t@luzin_s CREATED_AVI\r\n0000|29.06.2020|17:25|0000 \t101.21 \tep101sc21_v001.nk \t@luzin_s CREATED_AVI\r\n0000|29.06.2020|16:18|0000 \t36.09 \tep36sc09_v001.nk \t@naumova_d CREATED_AVI\r\n0000|29.06.2020|16:18|0000 \t101.20 \tep101sc20_v001.nk \t@luzin_s CREATED_AVI\r\n0000|29.06.2020|14:57|0000 \t101.13 \tep101sc13_v001.nk \t@luzin_s CREATED_AVI\r\n0000|29.06.2020|14:34|0000 \t101.11 \tep101sc11_v001.nk \t@luzin_s CREATED_AVI\r\n0000|29.06.2020|13:26|0000 \t101.10 \tep101sc10_v001.nk \t@luzin_s CREATED_AVI\r\n0000|29.06.2020|12:32|0000 \t101.08 \tep101sc08_v001.nk \t@luzin_s CREATED_AVI\r\n0000|26.06.2020|14:37|0000 \t101.09 \tep101sc09_v001.nk \t@luzin_s CREATED_AVI\r\n0000|26.06.2020|10:50|0000 \t101.07 \tep101sc07_v001.nk \t@luzin_s CREATED_AVI\r\n0000|26.06.2020|10:19|0000 \t101.06 \tep101sc06_v001.nk \t@luzin_s CREATED_AVI\r\n0000|26.06.2020|08:58|0000 \t101.05 \tep101sc05_v001.nk \t@luzin_s CREATED_AVI\r\n0000|26.06.2020|08:47|0000 \t101.04 \tep101sc04_v001.nk \t@luzin_s CREATED_AVI\r\n0000|26.06.2020|08:27|0000 \t101.03 \tep101sc03_v001.nk \t@luzin_s CREATED_AVI\r\n0000|24.06.2020|01:22|0000 \t32.01 \tep32sc01_local_v006.nk \t@aminov_k CREATED_AVI\r\n0000|23.06.2020|17:14|0000 \t36.02 \tep36sc02_v021.nk \t@naumova_d OPEN\r\n0000|23.06.2020|16:31|0000 \t28.49dop \tep28sc49dop_v001.nk \t@naumova_d OPEN\r\n0000|23.06.2020|12:40|0000 \t101.33 \tep101sc33_v001.nk \t@luzin_s OPEN\r\n0000|23.06.2020|11:06|0000 \t101.32Dop \tep101sc32Dop_v001.nk \t@luzin_s OPEN\r\n0000|23.06.2020|11:04|0000 \t101sc32Dop. \tep101sc32Dopsc_v001.nk \t@luzin_s OPEN\r\n0000|23.06.2020|10:33|0000 \t101.32 \tep101sc32_v001.nk \t@luzin_s OPEN\r\n0000|23.06.2020|10:20|0000 \t101.31 \tep101sc31_v001.nk \t@luzin_s OPEN\r\n0000|23.06.2020|10:11|0000 \t101.30 \tep101sc30_v001.nk \t@luzin_s OPEN\r\n0000|23.06.2020|10:00|0000 \t101.29 \tep101sc29_v001.nk \t@luzin_s OPEN\r\n0000|23.06.2020|01:53|0000 \t07.11 \tep07sc11_v045.nk \t@aminov_k CREATED_AVI\r\n0000|22.06.2020|13:35|0000 \t19.09 \tep19sc09_v037.nk \t@aminov_k CREATED_AVI\r\n0000|22.06.2020|12:30|0000 \t19.04 \tep19sc04_v023.nk \t@aminov_k CREATED_AVI\r\n0000|22.06.2020|11:53|0000 \t19.02 \tep19sc02_v017.nk \t@aminov_k CREATED_AVI\r\n0000|21.06.2020|02:31|0000 \t07.08 \tep07sc08_anim_v013.nk \t@aminov_k CREATED_AVI\r\n0000|19.06.2020|15:45|0000 \t07.10 \tep07sc10_v039.nk \t@aminov_k CREATED_AVI\r\n0000|19.06.2020|14:32|0000 \t07.12 \tep07sc12_v071.nk \t@aminov_k CREATED_AVI\r\n0000|19.06.2020|09:15|0000 \t36.14 \tep36sc14_v002.nk \t@naumova_d OPEN_NEW_VERSION\r\n0000|18.06.2020|16:53|0000 \t07.09 \tep07sc09_v027.nk \t@aminov_k CREATED_AVI\r\n0000|18.06.2020|00:54|0000 \t34.04 \tep34sc04_v014.nk \t@aminov_k CREATED_AVI\r\n0000|17.06.2020|17:48|0000 \t101.18 \tep101sc18_v001.nk \t@luzin_s CREATED_AVI\r\n0000|17.06.2020|17:26|0000 \t101.12 \tep101sc12_v001.nk \t@luzin_s CREATED_AVI\r\n0000|17.06.2020|14:37|0000 \t101.17 \tep101sc17_v001.nk \t@luzin_s CREATED_AVI\r\n0000|17.06.2020|13:16|0000 \t101.16 \tep101sc16_v001.nk \t@luzin_s CREATED_AVI\r\n0000|17.06.2020|12:25|0000 \t36.16 \tep36sc16_v001.nk \t@naumova_d OPEN\r\n0000|17.06.2020|11:48|0000 \t34.02 \tep34sc02_v078.nk \t@aminov_k CREATED_AVI\r\n0000|17.06.2020|10:16|0000 \t36.11 \tep36sc11_v001.nk \t@naumova_d OPEN\r\n0000|17.06.2020|10:06|0000 \t36.08 \tep36sc08_v001.nk \t@naumova_d OPEN\r\n0000|17.06.2020|09:39|0000 \t101.14 \tep101sc14_v001.nk \t@luzin_s CREATED_AVI\r\n0000|16.06.2020|23:35|0000 \t15.17 \tep15sc17_v044.nk \t@aminov_k CREATED_AVI\r\n0000|16.06.2020|23:21|0000 \t13.08 \tep13sc08_v047.nk \t@aminov_k CREATED_AVI\r\n0000|16.06.2020|20:37|0000 \t101.15 \tep101sc15_v001.nk \t@luzin_s CREATED_AVI\r\n0000|15.06.2020|23:47|0000 \t07.11dop \tep07sc11dop_v001.nk \t@aminov_k OPEN\r\n0000|15.06.2020|12:36|0000 \t23.43 \tep23sc43_v007.nk \t@luzin_s CREATED_AVI\r\n0000|15.06.2020|11:57|0000 \t23.54 \tep23sc54_v001.nk \t@luzin_s CREATED_AVI\r\n0000|13.06.2020|09:37|0000 \t23.49 \tep23sc49_v004.nk \t@luzin_s CREATED_AVI\r\n0000|13.06.2020|01:09|0000 \t36.15 \tep36sc15_v001.nk \t@aminov_k OPEN\r\n0000|12.06.2020|00:08|0000 \t36.10 \tep36sc10_v001.nk \t@aminov_k OPEN_NEW_VERSION\r\n0000|11.06.2020|16:26|0000 \t101.40 \tep101sc40_v001.nk \t@naumova_d OPEN\r\n0000|11.06.2020|16:14|0000 \t101.39 \tep101sc39_v001.nk \t@naumova_d OPEN\r\n0000|11.06.2020|16:04|0000 \t101.38 \tep101sc38_v001.nk \t@naumova_d OPEN\r\n0000|11.06.2020|13:36|0000 \t101.37 \tep101sc37_v001.nk \t@naumova_d OPEN\r\n0000|10.06.2020|18:04|0000 \t101.36 \tep101sc36_v001.nk \t@naumova_d OPEN\r\n0000|10.06.2020|17:46|0000 \t23.42 \tep23sc42_v003.nk \t@luzin_s CREATED_AVI\r\n0000|10.06.2020|17:03|0000 \t23.34 \tep23sc34_v004.nk \t@luzin_s CREATED_AVI\r\n0000|10.06.2020|16:39|0000 \t23.33 \tep23sc33_v004.nk \t@luzin_s CREATED_AVI\r\n0000|10.06.2020|16:11|0000 \t23.31 \tep23sc31_v003.nk \t@luzin_s CREATED_AVI\r\n0000|10.06.2020|15:53|0000 \t23.16 \tep23sc16_v001.nk \t@luzin_s CREATED_AVI\r\n0000|10.06.2020|15:21|0000 \t23.19 \tep23sc19_v006.nk \t@luzin_s CREATED_AVI\r\n0000|10.06.2020|14:27|0000 \t23.17 \tep23sc17_v004.nk \t@luzin_s CREATED_AVI\r\n0000|09.06.2020|19:56|0000 \t07.07 \tep07sc07_v042.nk \t@aminov_k CREATED_AVI\r"
 addUserKnob {26 h31 l Operation:}
 addUserKnob {22 OpenNK l OpenScript -STARTLINE T setLastNK()}
 addUserKnob {35 OpenScript l INVISIBLE -STARTLINE +INVISIBLE M {"OPEN SCRIPT/bufferLine:" "" "OPEN SCRIPT/    as Source" "python OpenWith()" "OPEN SCRIPT/    as New Nuke Session" "python OpenWith(1)" "OPEN SCRIPT/    as New Nuke Session (DONT CREATE A LOGLINE)" "python OpenWith(1,1)" "OPEN SCRIPT/    Find Last byDate *.nk and SOURCE" "python findLastNKFile()" "OPEN SCRIPT/    Select NK FILE and SOURCE" "python setLastNK()" ""}}
 addUserKnob {35 Dailies l "   " -STARTLINE M {"Create AVI/   output AVI (uncompress with watermark) (win)" "python createAVI(1)" "Create AVI/    output AVI (uncompress NOTEXT) (win)" "python createAVI(2)" ""}}
 addUserKnob {1 new_ep l "    ep:" -STARTLINE}
 addUserKnob {1 new_sc l "    sc:" -STARTLINE}
 addUserKnob {35 create_new_delete l "  " -STARTLINE M {"New EP.SC/Create New EP.SC and Add to List" "python createNewProjectOrAddCreated(1)" "New EP.SC/Add Created EP.SC to List and find Last NK" "python createNewProjectOrAddCreated(0)" "New EP.SC/Remove From List EP.SC(bufferline)" "python DeleteFromList()"}}
 addUserKnob {22 CurrentSessionToBufferLine l " CopyThisSessionLine " t "Current Open SessionLine copy to BufferLine\nFor Operations" -STARTLINE T CopyToBufferThisSessionLine()}
 addUserKnob {26 f l " "}
 addUserKnob {1 note_line l "  STATUS:" -STARTLINE}
 note_line ------------------------------------
 addUserKnob {1 inputID l "  ID:" -STARTLINE}
 addUserKnob {35 setstatus l "  " -STARTLINE M {"Set to Shot/bufferLine:" "" "Set Status/    Set STATUS" "python setStatus(0)" "Set Status/    Set ID" "python setStatus(0,1,0)" "Set Status/    Set Frame Duration from DPX" "python setStatus(0,0,1)" "Set Status/    Find LinkTable from STATUS and CopyToBuffer" "python CopyToBuffer(4,0)"}}
 addUserKnob {35 View l "  " -STARTLINE M {View/bufferLine: "" "View/    Show Last Changes of Shot" "python ViewChanges()" "View/    LastDailie" "python View(0)" "View/    PNG" "python View(1)" "View/    DPX_Left" "python View(2)" "View/    DPX_Right" "python View(3)" "View/    AVI_Left" "python View(4)" "View/    AVI_Right" "python View(5)" "View/for several lines in the Buffer:" "" "View/    View Appended LastDailies in PDPlayer " "python viewMultiple(0)" "View/    View SpreadSheet(firstframes) in PDPlayer" "python viewMultiple(2)" View/bufferLine: "" "View/    View IncrementalMontage of Episode(stills)" "python viewMultiple(1)" "View/    View all Dailies as Layers in PDPlayer" "python viewMultiple(3)" ""}}
 addUserKnob {35 MoreTools l "  " -STARTLINE M {"Tools/OPEN Folder (bufferline):" "" "Tools/    SOURCES" "python OpenFolder(0)" "Tools/    NK_PROJECT" "python OpenFolder(1)" "Tools/    DPX_LEFT" "python OpenFolder(2)" "Tools/    DPX_RIGHT" "python OpenFolder(3)" "Tools/    OUTPUT_AVI" "python OpenFolder(4)" "Tools/    PNG_FOLDER" "python OpenFolder(5)" "Tools/    DAILIES_FOLDER" "python OpenFolder(6)" "Tools/LOAD to ThisSession (bufferLine):" "" "Tools/    DPX" "python LoadIntoNuke(0)" "Tools/    PNG" "python LoadIntoNuke(1)" "Tools/    Dailies" "python LoadIntoNuke(2)" "Tools/    OutputAVI" "python LoadIntoNuke(3)" "Tools/    Sources(?)" "python LoadIntoNuke(4)" "Tools/CopyPath to Buffer (bufferLine):" "" "Tools/    Find LinkTable and CopyToBuffer" "python CopyToBuffer(4,0)" "Tools/    Last Dailie Path" "python CopyToBuffer(0)" "Tools/    NK FilePath" "python CopyToBuffer(2)" Tools/ToggleConvertPath(win/unix) "python toggleConvertPath()"}}
 addUserKnob {20 snippetManagement l "Snippet Management"}
 addUserKnob {1 srch_snippet l Search:}
 addUserKnob {22 Find_BTN l "FindSnippet / View All" -STARTLINE T "code = nuke.thisNode()\['code'].getText()\nexec(code)\nSnippet(0)"}
 addUserKnob {26 ff l "" -STARTLINE T "  "}
 addUserKnob {6 ShowStickyVersion l "Show With Sticky Version (HelpMode)" -STARTLINE}
 addUserKnob {22 SaveSelectedToSnippet l CreateSnippet t "To Create Snippet \nSelect Nodes \nFor HELPMODE USE StickyNote\nAnd Click here" -STARTLINE T "code = nuke.thisNode()\['code'].getText()\nexec(code)\nSnippet(1)"}
 addUserKnob {22 DeleteSnippet t "To Delete Snippet\nCopy To Buffer Snippet Path \nAnd Click Here" -STARTLINE T "code = nuke.thisNode()\['code'].getText()\nexec(code)\nSnippet(2)"}
 addUserKnob {26 aaaf l "List Of Snippets" T "for use - TrippleClick to PathSnippet and Drag to NodeGraph:"}
 addUserKnob {43 snippetList l "" +STARTLINE}
 snippetList "#VIBRANCE PHOTOSHOP SATURATION  -  Лют Вибранса в фотошопе выкрученный  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/VIBRANCE_PHOTOSHOP_SATURATION_180216192419/nodes.nk\n\n#EP03 PAINT MARKS VER01  -  картинки по грейду третьего эпизода @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/EP03_PAINT_MARKS_VER01_180413180011/nodes.nk\n\n#CREATE WATERMARK   -  for resolution 2132 870 _^from_metadata @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/CREATE_WATERMARK__190318114911/nodes.nk\n\n#NOOP WITH COLOR  -  цветоной кирпич нода  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/NOOP_WITH_COLOR_180326123736/nodes.nk\n\n#TILDA VIEWER  -   @belkov_a\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/TILDA_VIEWER_190213190417/nodes.nk\n\n#SKY PROJECT SPHERE  -  сетап для неба из урфина первого @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/SKY_PROJECT_SPHERE_180112144644/nodes.nk\n\n#MOTION VECTOR CAMERA Z DEPTH   -  Расчитать Вектора по глубине используя анимационную камеру  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/MOTION_VECTOR_CAMERA_Z_DEPTH__180322173723/nodes.nk\n\n#GENERATE MESH PROJECT POINTCLOUD KD   -  Создает пойсон меш рендер с помощью сканлайна с двух камер  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/GENERATE_MESH_PROJECT_POINTCLOUD_KD__180326192856/nodes.nk\n\n#BAKE MOTION VECTOR MB   -  пресет для высчита моушин векторов из алембик файлов персоонажей  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/BAKE_MOTION_VECTOR_MB__180328180749/nodes.nk\n\n#07 SPEC POL 50 53  -  спекуляр на пол в 07 эпизоде @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/07_SPEC_POL_50_53_180228151613/nodes.nk\n\n#JOIN PASSES STEREO JOIN WITH MEGREATOP  -  снипет для соединения пассов @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/JOIN_PASSES_STEREO_JOIN_WITH_MEGREATOP_180622125133/nodes.nk\n\n#AE_NORMAL  -  наложение по нормалу _^для проверки ae наложения @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/AE_NORMAL_181129145042/nodes.nk\n\n#REINHARD LUT REDSHIFT LAYERS TONEMAP  -  Забейканый Лют ренхарда с редшифт сцены_^ @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/REINHARD_LUT_REDSHIFT_LAYERS_TONEMAP_180815154052/nodes.nk\n\n#Not Description\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/REF_GEO/nodes.nk\n\n#SMOUKE FROM DEPTH REDSIFT  -  пасс глубины в дымку в редшифте @aminov_k\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/SMOUKE_FROM_DEPTH_REDSIFT_181214092425/nodes.nk\n\n#Not Description\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/PROTO_COC_DEFOCUS/nodes.nk\n\n#TMP CORRECTION SHTORA_WALL 03EP  -  временый снипет корекции штор и стен  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/TMP_CORRECTION_SHTORA_WALL_03EP_180514132453/nodes.nk\n\n#REPROJECT STEREO ON CARD  -  репрожект стерео с левой картинки на правую используя камеры и карточку @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/REPROJECT_STEREO_ON_CARD_180417180719/nodes.nk\n\n#PODTEPLIT TEN 07  -  подтеплать тень в двух сценах 58 и 60 @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/PODTEPLIT_TEN_07_180228153154/nodes.nk\n\n#DEPTH GRADE DIFF WITH P   -   @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/DEPTH_GRADE_DIFF_WITH_P__180406164514/nodes.nk\n\n#CREATE DAILIE AVI S  -   @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/CREATE_DAILIE_AVI_S_181211193154/nodes.nk\n\n#TONEMAP REINHARD FILMIC  -  компресор экспозиции @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/TONEMAP_REINHARD_FILMIC_180821145627/nodes.nk\n\n#URF_2 EP 18 PRESETUP FON CORRECTIONS  -  пресетап корекции фона из сцены 18 24 @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/URF_2_EP_18_PRESETUP_FON_CORRECTIONS_190619115905/nodes.nk\n\n#PP MATE FOR RS   -  create shperical mask from p (rs pass) @sinelnikov_v\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/PP_MATE_FOR_RS__181225174047/nodes.nk\n\n#MASK POSITION WORLD SPHERE REDSHIFT RS  -  pp_sphere только для редшифта @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/MASK_POSITION_WORLD_SPHERE_REDSHIFT_RS_190627155533/nodes.nk\n\n#KD_PLUS  -  добавляет кд в тени  @belkov_a\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/KD_PLUS_190131182833/nodes.nk\n\n#LUMINOSITY COLOR PHOTOSHOP MERGE OPERATIONS  -  режим наложения люминосити и колор  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/LUMINOSITY_COLOR_PHOTOSHOP_MERGE_OPERATIONS_180627162319/nodes.nk\n\n#PROJECT WITH P FOR RS  -  прожектит с помощью пасс позиции p для rs @sinelnikov_v\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/PROJECT_WITH_P_FOR_RS_181225154906/nodes.nk\n\n#KANTIKI  -  Работа с наложениями и появлениями кантиков mix(matte,over) @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/KANTIKI_200108124024/nodes.nk\n\n#POSITION TO POINTS MAKE POINT CLOUD REDSHIFT  -  создание поинтклауда для редшифта @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/POSITION_TO_POINTS_MAKE_POINT_CLOUD_REDSHIFT_190625185301/nodes.nk\n\n#Z DEFOCUS BLUR DEPTH REAL  -  дефокус с расчетами кок радиуса на размеры матрицы близкие к реальным @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/Z_DEFOCUS_BLUR_DEPTH_REAL_180111154040/nodes.nk\n\n#VECTOR BLUR ALEMBIC  -  получение векторов моушина из алембиков  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/VECTOR_BLUR_ALEMBIC_180301161323/nodes.nk\n\n#MOTION VECTORS BLUR FROM REDSHIFT EXAMPLE  -  пример использования моушин векторов ведро @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/MOTION_VECTORS_BLUR_FROM_REDSHIFT_EXAMPLE_190708151231/nodes.nk\n\n#EDGES FROM KD  -  Создает маску Краев которые шарпить не надо из КД Пасса  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/EDGES_FROM_KD_180109180259/nodes.nk\n\n#FIX SVITER  PIATNA ELLY CLOTH KD KEYING  -  пятна от порошка на свитери элли  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/FIX_SVITER__PIATNA_ELLY_CLOTH_KD_KEYING_180425124419/nodes.nk\n\n#NONE  -  описание @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/NONE_180811153028/nodes.nk\n\n#ABC PARTICLES IMPORT 1-500 RANGE  -  Партиклы вяло тякучие @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/ABC_PARTICLES_IMPORT_1-500_RANGE_200211152017/nodes.nk\n\n#BIG TEXT DOT BACKDROP  -  точка с подписью из названия _^и вертикальная разделительная полоска @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/BIG_TEXT_DOT_BACKDROP_180228184305/nodes.nk\n\n#EP 18 COMPOS PRESET  -   @aminov_k\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/EP_18_COMPOS_PRESET_190618132502/nodes.nk\n\n#ANIN LIGHT EP14 LIGHTSET FILE BONFIRE  -  анимированный свет от костра @SYSTEM\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/ANIN_LIGHT_EP14_LIGHTSET_FILE_BONFIRE_180716103752/nodes.nk\n\n#AE_NORMAL_EXAMPLE  -  пример для подготовки секвенции Волуметрика в АЕ @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/AE_NORMAL_EXAMPLE_181129160247/nodes.nk\n\n#PRECOMPOSITION_MANAGER_PROTOTYPE  -  Прототип тулзовины для прекомпоза и локализатора @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/PRECOMPOSITION_MANAGER_PROTOTYPE_180115160943/nodes.nk\n\n#RELIGHTTOOLSET  -  релайт по группам env+module(olc)+key @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/RELIGHTTOOLSET_180110145517/nodes.nk\n\n#CONVERT P TO WP FOR REDSHIFT  -  конвертирует пасс позиции с редшифта для работы в ПеПеМайтами  @aminov_k\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/CONVERT_P_TO_WP_FOR_REDSHIFT_181211122819/nodes.nk\n\n#NEAT VIDEO WATER MARK FREE  -  освобождение от ватермарка неатвидео шумодава v5 @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/NEAT_VIDEO_WATER_MARK_FREE_191031113143/nodes.nk\n\n#RIVETNODE  -  для привязке к Геометрии _^раскрытый код @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/RIVETNODE_181130153201/nodes.nk\n\n#NOISE WP   -  из ворлд позиции создает нойз для повышения детальности текстур  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/NOISE_WP__180112144006/nodes.nk\n\n#REDSHIFT SNIPET PRELIGHT PASSES SORT  -  Снипет для соединения пасов Редшифта @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/REDSHIFT_SNIPET_PRELIGHT_PASSES_SORT_190708143910/nodes.nk\n\n#REDSHIFTTONEMAPING  -  тест с тонемапингом и без в редшифте (исходники могут удалить) @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/REDSHIFTTONEMAPING_180208112912/nodes.nk\n\n#PROTO_STEREO_JOIN  -  прототип считывателя секвенции @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/PROTO_STEREO_JOIN_180328114259/nodes.nk\n\n#RECOVEREGE AND UNRECOVERAGE STEREO TRANSFORM  -  для сведения стерео и разведения к исходному_^ @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/RECOVEREGE_AND_UNRECOVERAGE_STEREO_TRANSFORM_180625152035/nodes.nk\n\n#FRAME OFFSET EXPRESSION PADZERO  -  експрешин для сохранения секвенции с оффетом номера кадра @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/FRAME_OFFSET_EXPRESSION_PADZERO_180306160317/nodes.nk\n\n#SKY PROJECT HOR HOLD CAMERA  -  сетап для неба горизонтальный для удобного прожекта нескольких слоев  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/SKY_PROJECT_HOR_HOLD_CAMERA_180508165017/nodes.nk\n\n#FIX HILIGHTS MEDIAN TRANSLATE KEY TIME KEY  -  кеит мелькающие точки и мажет медианом  @kirillovskih_i\n/dataserver/Project/MALYSH/lib/ComposeManager/Asset/FIX_HILIGHTS_MEDIAN_TRANSLATE_KEY_TIME_KEY_180626162808/nodes.nk\n\n"
 addUserKnob {20 prefs_tab l Preferences}
 addUserKnob {26 h56 l "Project Folders:"}
 addUserKnob {1 mfolder_line l ManagerFolder}
 mfolder_line /dataserver/Project/MALYSH/lib/ComposeManager/ScriptsLog/
 addUserKnob {26 ""}
 addUserKnob {1 p_line l ProjectFolder}
 p_line /dataserver/Project/MALYSH/scenes/
 addUserKnob {1 pt_line l ProjectTemplates}
 pt_line "ep<EP>/ep<EP>sc<SC>/compose/nuke;ep<EP>/ep<EP>sc<SC>/compose/render;ep<EP>/ep<EP>sc<SC>/compose/dailies"
 addUserKnob {26 ""}
 addUserKnob {1 o_line l OutputFolder}
 o_line /dataserver/Project/MALYSH/output/
 addUserKnob {1 ot_line l OutputTemplates}
 ot_line "ep<EP>/render_tiff/ep<EP>sc<SC>;ep<EP>/ep<EP>sc<SC>.avi"
 addUserKnob {26 ""}
 addUserKnob {1 s_line l SourcesFolder}
 s_line /dataserver/Project/MALYSH/scenes/
 addUserKnob {1 st_line l SourcesTemplates}
 st_line ep<EP>/ep<EP>sc<SC>/compose/
 addUserKnob {26 ""}
 addUserKnob {1 a_line l AssteFolder}
 a_line /dataserver/Project/MALYSH/lib/ComposeManager/Asset/
 addUserKnob {1 a2_line l AssetMirror}
 addUserKnob {26 ""}
 addUserKnob {1 u_line l UserName}
 addUserKnob {3 res_x -STARTLINE}
 res_x 2048
 addUserKnob {3 res_y -STARTLINE}
 res_y 858
 addUserKnob {6 stereo -STARTLINE}
 addUserKnob {26 spases l "" +STARTLINE T "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
 addUserKnob {20 code_tab l INVISIBLE +INVISIBLE}
 addUserKnob {43 code l "" +STARTLINE}
 code "#!/bin/python\nimport os,time,datetime,subprocess,getpass\nfrom PySide import QtGui\nfrom shutil import copyfile\n\ndef isdirorfileRaise(dirfile):\n    if os.path.isdir(dirfile) or os.path.isfile(dirfile):\n        pass\n    else:\n        raise Exception('Directory or File not Found:\\n'+dirfile)\n\ndef CheckPathLowersUppers(path):\n   pass # Found from Input DirPath or FilePath PathWithDirmapsWhere is Server-3d Mounted And Check LowerUpper Symvols \n\n\n\ndef pathToLinnux(path_or_askLinux):\n    '''\n        if os is linux convert path from // to /\n    '''\n    #get Platform:\n    from sys import platform as _platform\n    if _platform == \"linux\" or _platform == \"linux2\":\n        if path_or_askLinux ==  'LINUX?':\n            return 1\n        path = path_or_askLinux.replace('//','/')\n    elif _platform == \"darwin\":\n        if path_or_askLinux ==  'LINUX?':\n            return 1\n        path = path_or_askLinux.replace('//','/')\n    elif _platform == \"win32\" or _platform == \"win64\":\n        if path_or_askLinux ==  'LINUX?':\n            return 0\n        return path_or_askLinux\n    return path\n\ndef panelGetProject(Button=0):\n    #+++++++++PROJECTSETTINGS+++++++++++#\n    Projects = \['00_UrfinJuse2','01_Piramidy','02_UrfinJuse2_dataserver','03_MALYSH']\n    resolutions = \['2132X870','2048X1107','2132X870','2048X858']\n    stereo_enb = \[1, 0, 1, 0 ]\n    \n    managefolders = \[pathToLinnux('//server-3d/Project/UrfinJuse2/lib/ComposeManager/ScriptsLog/'),\n                      pathToLinnux('//server-3d/Project/Piramidy/lib/ComposeManager/ScriptsLog/'),\n                        pathToLinnux('//dataserver/Project/UrfinJuse2/lib/ComposeManager/ScriptsLog/'),\n                         pathToLinnux('//dataserver/Project/MALYSH/lib/ComposeManager/ScriptsLog/')]\n    \n    projectFolders = \[pathToLinnux('//server-3d/Project/UrfinJuse2/scenes/'),\n                        pathToLinnux('//server-3d/Project/Piramidy/scenes/'),\n                          pathToLinnux('//dataserver/Project/UrfinJuse2/scenes/'),\n                            pathToLinnux('//dataserver/Project/MALYSH/scenes/')]\n\n    #projecttemplates nkfiles;pngrender;dailies;\n    projectTemplates = \['ep<EP>/ep<EP>sc<SC>/compose/nuke;ep<EP>/ep<EP>sc<SC>/compose/render;ep<EP>/ep<EP>sc<SC>/compose/dailies',\n                        'ep<EP>/ep<EP>sc<SC>/compose/nuke;ep<EP>/ep<EP>sc<SC>/compose/render;ep<EP>/ep<EP>sc<SC>/compose/dailies',\n                        'ep<EP>/ep<EP>sc<SC>/compose/nuke;ep<EP>/ep<EP>sc<SC>/compose/render;ep<EP>/ep<EP>sc<SC>/compose/dailies',\n                        'ep<EP>/ep<EP>sc<SC>/compose/nuke;ep<EP>/ep<EP>sc<SC>/compose/render;ep<EP>/ep<EP>sc<SC>/compose/dailies']\n    \n    outputfolders = \[pathToLinnux('//server-3d/Project/UrfinJuse2/output/'),\n                       pathToLinnux('//server-3d/Project/Piramidy/output/'),\n                         pathToLinnux('//dataserver/Project/UrfinJuse2/output/'),\n                           pathToLinnux('//dataserver/Project/MALYSH/output/')]\n\n    #outputTemplates dpxleftfolder;dpxRightfolder;aviLeftFile;aviRightFile;\n    outputTemplates = \['ep<EP>/render_dpx/ep<EP>sc<SC>/ep<EP>sc<SC>_left;ep<EP>/render_dpx/ep<EP>sc<SC>/ep<EP>sc<SC>_right;ep<EP>/ep<EP>sc<SC>_left.avi;ep<EP>/ep<EP>sc<SC>_right.avi',\n                       'ep<EP>/render_dpx/ep<EP>sc<SC>/ep<EP>sc<SC>_left;ep<EP>/render_dpx/ep<EP>sc<SC>/ep<EP>sc<SC>_right;ep<EP>/ep<EP>sc<SC>_left.avi;ep<EP>/ep<EP>sc<SC>_right.avi',\n                       'ep<EP>/render_dpx/ep<EP>sc<SC>/ep<EP>sc<SC>_left;ep<EP>/render_dpx/ep<EP>sc<SC>/ep<EP>sc<SC>_right;ep<EP>/ep<EP>sc<SC>_left.avi;ep<EP>/ep<EP>sc<SC>_right.avi',\n                       'ep<EP>/render_tiff/ep<EP>sc<SC>;ep<EP>/ep<EP>sc<SC>.avi']\n    \n    sourcesFolders = \[pathToLinnux('//renderserver/Project/UrfinJuse2/scenes/'),\n                        pathToLinnux('//renderserver/Project/Piramidy/scenes/'),\n                          pathToLinnux('//dataserver/Project/UrfinJuse2/scenes/'),\n                            pathToLinnux('//dataserver/Project/MALYSH/scenes/')]\n    \n    #sourcetemplate\n    sourcesTemplates = \['ep<EP>/ep<EP>sc<SC>/compose/',\n                        'ep<EP>/ep<EP>sc<SC>/compose/',\n                        'ep<EP>/ep<EP>sc<SC>/compose/',\n                        'ep<EP>/ep<EP>sc<SC>/compose/']\n    \n    assetFolders = \[pathToLinnux('//server-3d/Project/UrfinJuse2/lib/ComposeManager/Asset/'),\n                      pathToLinnux('//server-3d/Project/Piramidy/lib/ComposeManager/Asset/'),\n                        pathToLinnux('//dataserver/Project/UrfinJuse2/lib/ComposeManager/Asset/'),\n                          pathToLinnux('//dataserver/Project/MALYSH/lib/ComposeManager/Asset/')]\n    assetMirrorFolders = \['','','','']\n    \n    #+++++++++PROJECTSETTINGS+++++++++++#\n    node = nuke.thisNode()\n    #node = nuke.toNode('Manager')\n    lastprojectfile = os.environ\['HOME']+'\\\\ScriptManagerLastProject'\n    from sys import platform as _platform\n    if _platform == \"linux\" or _platform == \"linux2\":\n        lastprojectfile = os.environ\['HOME']+'/ScriptManagerLastProject'\n    SetprojectNum = 0\n    if Button == 1:\n        p = nuke.Panel('Set Current Project')\n        p.addEnumerationPulldown('Select Project:', ' '.join(Projects))\n        p.addButton('Cancel')\n        p.addButton('Set Project')\n        result = p.show()\n        if result != 0:\n            userChoise = p.value('Select Project:')\n            SetprojectNum = int(userChoise.split('_')\[0])\n            #writefileHistory\n            with open(lastprojectfile,'w') as l:\n                l.write(str(SetprojectNum))\n        else:\n            return\n    else:\n        #SaveContentOfBuffersOrRestore(1)\n        #getSnippetCollectionForProject\n        if os.path.isfile(lastprojectfile):\n            with open(lastprojectfile,'r') as l:\n                SetprojectNum = int(l.read())\n        else:\n            nuke.message('LastProject file NotFound/nSet Current Project in Preferences')\n        \n    node\['Project'].setText(Projects\[SetprojectNum])\n    node\['res_x'].setValue(int(resolutions\[SetprojectNum].split('X')\[0]))\n    node\['res_y'].setValue(int(resolutions\[SetprojectNum].split('X')\[1]))\n    node\['stereo'].setValue(int(stereo_enb\[SetprojectNum]))\n    node\['mfolder_line'].setText(managefolders\[SetprojectNum])\n    node\['a_line'].setText(assetFolders\[SetprojectNum])\n    node\['a2_line'].setText(assetMirrorFolders\[SetprojectNum])\n    node\['p_line'].setText(projectFolders\[SetprojectNum])\n    node\['pt_line'].setText(projectTemplates\[SetprojectNum])\n    node\['o_line'].setText(outputfolders\[SetprojectNum])\n    node\['ot_line'].setText(outputTemplates\[SetprojectNum])\n    node\['s_line'].setText(sourcesFolders\[SetprojectNum])\n    node\['st_line'].setText(sourcesTemplates\[SetprojectNum])\n    Snippet()\n    searchListScriptManager()\n    return SetprojectNum\n\ndef getVariable(node,num=0,ep='00',sc='00',check=0):\n   # 0 - User \n   # 1 - Scriptlogfolder \n   # 2 - assetFolder\n   # 3 - nkscriptsFolder \n   # 4 - pngRenderFolder\n   # 5 - dailiesFolder\n   # 6 - outputFolder0(left)\n   # 7 - outputFolder1(right)\n   # 8 - outputFolder2(leftavifile) \n   # 9 - outputFolder2(rightavifile) \n   # 10 - SourceFolder\n   # 11 - GlobalOutputFolder\n   # 12 - EpOutputFolder\n   # 13 - Template NK File\n    if num == 0:\n        val = node\['u_line'].getText()\n        if val == '\$USER' or val == '':\n            var = getpass.getuser()\n            return var\n        else:\n            return val\n    elif num == 1:\n        val = node\['mfolder_line'].getValue()\n        if val != '':\n            return val\n        else:\n            return None\n    elif num == 2:\n        val = node\['a_line'].getValue()\n        val2 = node\['a2_line'].getValue()\n        if val != '' or val2 != '':\n            return \[val,val2]\n        else:\n            return None\n    elif num == 3 or num == 4 or num == 5:\n        p = node\['p_line'].getValue()\n        t = node\['pt_line'].getValue()\n        if p != '' and t != '':\n            path = p + t.split(';')\[num-3].replace('<EP>',ep).replace('<SC>',sc)\n            if check == 1: isdirorfileRaise(path)\n            return path\n    elif num == 6 or num == 7 or num == 8 or num == 9:\n        o = node\['o_line'].getValue()\n        ot = node\['ot_line'].getValue()\n        if o != '' and ot != '':\n            path = o + ot.split(';')\[num-6].replace('<EP>',ep).replace('<SC>',sc)\n            if check == 1: isdirorfileRaise(path)\n            return path\n    elif num == 10:\n        s = node\['s_line'].getValue()\n        st = node\['st_line'].getValue()\n        if s != '' and st != '':\n            path = s + st.replace('<EP>',ep).replace('<SC>',sc)\n            if check == 1: isdirorfileRaise(path)\n            return path\n    elif num == 11:\n        s = node\['o_line'].getValue()\n        isdirorfileRaise(s)\n        return s\n    elif num == 12:\n        s = node\['o_line'].getValue()\n        path = s + 'ep' + ep\n        if check == 1: isdirorfileRaise(path)\n        return path\n    elif num == 13:\n        s = node\['mfolder_line'].getValue()\n        nktemplatefile =  '/'.join(s.split('/')\[:-2])+'/template.nk'\n        return nktemplatefile\n    else:\n        return None\n\n\ndef getLogData(scriptlogDir='',username='all',timerange=''):\n    if timerange != '':\n        ts = -int(timerange.split('-')\[0]+'000000')\n        te = -int(timerange.split('-')\[1]+'999999')\n    if scriptlogDir != '':\n        if not os.path.isdir(scriptlogDir):\n            os.makedirs(scriptlogDir)\n        files = os.listdir(scriptlogDir)\n        if username != 'all':\n            for f in files:\n                if username in f:\n                    files = \[]\n                    files.append(f)\n        data = \{\}\n        for f in files:\n            fullpathfile = scriptlogDir + '/' + f\n            if os.path.isfile(fullpathfile):\n               with open(fullpathfile, 'r') as infile:\n                   i = 0\n                   limmitlinesperfile = 1000\n                   for line in infile:\n                       if i < limmitlinesperfile:\n                           if timerange != '':\n                               el = line.split('  ->  ')\n                               time = -int(el\[0].split('_')\[1])\n                               key = -int(el\[0].split('_')\[1]+el\[0].split('_')\[0]+el\[0].split('_')\[2])\n                               if time<ts and time>te:\n                                   data\[key] = (el\[1],el\[2],el\[3])\n                               else:\n                                   i-=1\n                           else:\n                               el = line.split('  ->  ')\n                               key = -int(el\[0].split('_')\[1]+el\[0].split('_')\[0]+el\[0].split('_')\[2])\n                               data\[key] = (el\[1],el\[2],el\[3])\n                       i+=1\n        return data\n\ndef searchPatternToTuple(searchpattern):\n    excludePatterns = \[]\n    includePatterns = \[]\n    if searchpattern != '':\n        if ';' in searchpattern:\n            splist = searchpattern.split(';')\n            for sp in splist:\n                if sp != '':\n                    if sp\[0] == '^':\n                        sp = sp\[1:]\n                        excludePatterns.append(sp)\n                    else:\n                        includePatterns.append(sp)\n        else:\n            if searchpattern\[0] == '^':\n                sp = searchpattern\[1:]\n                excludePatterns.append(sp)\n            else:\n                includePatterns.append(searchpattern)\n        search_INCLUDE_EXCLUDE_Tuple = (includePatterns,excludePatterns)\n    else:\n        search_INCLUDE_EXCLUDE_Tuple = 'ALL'\n    return search_INCLUDE_EXCLUDE_Tuple\n\ndef dataToLine(timestamp, scene, nkfile, actionArtist, searchPatternTuple):\n    ts = abs(timestamp).__str__()\n    timestamp = str(int(ts\[12:16])-1000).zfill(4) + '|' +  ts\[4:6]+'.'+ts\[2:4]+'.20'+ts\[:2]+'|'+ts\[6:8]+':'+ts\[8:10]+'|'+ts\[16:20]\n    sep = ' \\t'\n    ReadibleLine = sep + scene + sep + nkfile + sep + actionArtist\[:-1]\n    found = 0\n    if searchPatternTuple != 'ALL':\n        found = 0\n        if len(searchPatternTuple\[0]) != 0:\n            for includePattern in searchPatternTuple\[0]:\n                if includePattern.lower() in ReadibleLine.lower():\n                    found += 1\n        else:\n            found = 1\n        if len(searchPatternTuple\[1]) != 0:\n            for excludePattern in searchPatternTuple\[1]:\n               if excludePattern.lower() in ReadibleLine.lower():\n                   found = 0\n        if found > 0:            \n            return timestamp + ReadibleLine\n        else:\n            return ''\n    else:\n        return timestamp +ReadibleLine\n\ndef SortTextByID(dictKeyText):\n    datakeys = reversed(sorted(dictKeyText))\n    text = ''\n    for i in datakeys:\n        text += dictKeyText\[i] + '\\n'\n    return text\n    \ndef DataSortSearch(data, searchPattern='', ignoreRepetitions=1, maxitems=30, sortbyMontageID=0):\n    datakeys = sorted(data)\n    Scenes = \[]\n    text = ''\n    SearchTuple = searchPatternToTuple(searchPattern)\n    if sortbyMontageID > 0:\n        dictID_Readlines = \{\}\n    i = 0\n    for key in datakeys:\n        if i<maxitems:\n            if sortbyMontageID > 0:\n                idkey = abs(key).__str__()\n                if sortbyMontageID != 1:\n                  ep = data\[key]\[0].split('.')\[0]\n                  idkey = -int(ep+idkey\[12:-4]+idkey\[:-9])\n                else:\n                  idkey = -int(idkey\[12:-4]+idkey\[:-9])\n            if ignoreRepetitions==1:\n                if data\[key]\[0] not in Scenes:\n                    Scenes.append(data\[key]\[0])\n                    readline = dataToLine(key,data\[key]\[0],data\[key]\[1],data\[key]\[2],SearchTuple)\n                    if readline != '':\n                        if i == 0 : sep = ''\n                        else: sep = '\\n'\n                        text += sep + readline\n                        if sortbyMontageID > 0:\n                            dictID_Readlines\[idkey] = readline\n                        i += 1\n            else:\n                readline = dataToLine(key,data\[key]\[0],data\[key]\[1],data\[key]\[2],SearchTuple)\n                if readline != '':\n                    if i == 0 : sep = ''\n                    else: sep = '\\n'\n                    text += sep+ readline\n                    if sortbyMontageID > 0:\n                        dictID_Readlines\[idkey] = readline\n                    i += 1\n    if sortbyMontageID > 0:\n        text = SortTextByID(dictID_Readlines)\n    return text\n\ndef dataToHEX(data):\n    ##25.09.2017 to 170925\n    dataspl = data.split('.')\n    return dataspl\[2]\[2:4]+dataspl\[1]+dataspl\[0]\n\ndef searchListScriptManager(newLinetoCopy=''):\n    node = nuke.thisNode()\n    maxitems = node\['maxitems'].getValue()\n    sorttype = 0\n    byID = int(node\['sortbyID'].getValue())\n    byepID = int(node\['sortepid'].getValue())\n    sorttype = byID + byepID\n    if byepID == 1:\n      sorttype = 2\n    showall = int(node\['showallop'].getValue())\n    searchpattern = node\['searchtext'].getText()\n    sortmy = 'all'\n    if node\['sortmy'].getValue() == 1:\n        sortmy = getVariable(node,0)\n    start = node\['startdate'].getText()\n    end = node\['enddate'].getText()\n    if start == '' or end == '':\n        timerange = ''\n    else:\n        start = dataToHEX(start)\n        end = dataToHEX(end)\n        timerange = start +'-'+ end\n        if len(timerange) != 13:\n            timerange = ''\n    data = getLogData(getVariable(node,1),sortmy,timerange)\n    text = DataSortSearch(data, searchpattern, showall, maxitems,sorttype)\n    node\['last_changes_list'].setText(text)\n    if newLinetoCopy != '':\n       QtGui.QApplication.clipboard().setText(newLinetoCopy)\n\n\ndef timeStamp():\n    TS = datetime.datetime.fromtimestamp(time.time()).strftime('%y%m%d%H%M%S')\n    return TS\n\ndef addLineLog(node,oldline,newOperation='',newNKName=''):\n    ## get User NAme getvariable\n    user = getVariable(node,0)\n    ## get dir \n    pathtofile = getVariable(node,1)+user+'_scriptsLog.txt'\n    sep = '  ->  '\n    sepl = ' \\t'\n    splitedold = oldline.split(sepl)\n    montageid = str(int(splitedold\[0].split('|')\[0])+1000)\n    durframes = splitedold\[0].split('|')\[-1]\n    if newOperation\[:6] == 'NEWID=':\n        montageid = str(int(newOperation\[6:])+1000)\n    if newOperation\[:12] == 'NEWDURATION=':\n        durframes = newOperation\[12:]\n    ts = timeStamp()\n    error = 0\n    if newNKName == '' and newOperation == '':#525252#FFFFFF#FFFFFF#FFFFFF\n        error = 1\n    if newNKName == '':\n        newNKName = splitedold\[2]\n    if newOperation == '':\n        newOperation = '@' + user +' OPEN_NEW_VERSION'\n    else:\n        newOperation = '@' + user + ' ' + newOperation\n    newLine = montageid + '_'+ ts +'_'+ durframes + sep + splitedold\[1]+ sep + newNKName + sep + newOperation + '\\n'\n    newReadLine = str(int(montageid)-1000).zfill(4) + '|d|t|'+ durframes + sepl + splitedold\[1]+ sepl + newNKName + sepl + newOperation + '\\n'\n    if error != 1:\n        if not os.path.isfile(pathtofile):\n            with open(pathtofile, 'w') as f:\n               pass\n        with open(pathtofile, 'r+') as f:\n            lines = f.readlines()\n            f.seek(0)\n            f.write(newLine)\n            f.writelines(lines)\n    return newReadLine\n\ndef ViewChanges(current=0):\n    node = nuke.thisNode()\n    line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n    if current == 0:\n      epscnk = getEPSCformLine(line)\n      searchpattern = line.split(' \\t')\[1] + ' '\n    else:\n      searchpattern = getEPSCCurent()\n    data = getLogData(getVariable(node,1))\n    text = DataSortSearch(data, searchpattern, 0, 100)\n    node\['last_changes_list'].setText(text)\n\ndef OpenWith(newSession=0,disLog=0):\n    node = nuke.toNode('Manager')\n    line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n    epscnk = getEPSCformLine(line)\n    dirnk = getVariable(node, 3 ,epscnk\[0] ,epscnk\[1],1)\n    thisFile = nuke.root().name()\n    nkFile = dirnk + '/' + epscnk\[2]\n    if newSession == 0: # Open as Source\n        #save this file, delete all nodes except Maneger, and source NKfile\n        save = 1\n        if nuke.root().name() == 'Root':\n            ask = nuke.ask('Current nk UNTITLED and NOT Saved! \\nSource?:\\n'+ nkFile)\n            save = 0\n        else:\n            ask = nuke.ask('Save Current Script to:\\n'+thisFile+'\\n\\nand Source?:\\n'+ nkFile)\n        if ask:\n            nuke.root().begin()\n            if save == 1:\n                nuke.scriptSave()\n            g = nuke.allNodes()\n            for n in g:\n                if n != node:\n                    nuke.delete(n)\n            nuke.scriptSource(nkFile)\n            nuke.scriptSaveAs(nkFile,overwrite = 1)\n            nuke.delete(nuke.toNode('Manager1'))\n            nuke.delete(nuke.toNode('Manager2'))\n            nuke.delete(nuke.toNode('Manager3'))\n            addLineLog(node, line, 'OPEN')\n    else: #Open with newSession\n        if os.path.isfile(nkFile):\n            nuke.scriptOpen(nkFile)\n            if disLog==0:\n                addLineLog(node, line, 'OPEN')\n\ndef getlastFile(directory,endfile='.nk'):\n    search_dir = directory\n    os.chdir(directory)\n    files = filter(os.path.isfile, os.listdir(search_dir))\n    files.sort(key=lambda x: os.path.getmtime(x))\n    lastfile = ''\n    for f in reversed(files):\n        if f\[-3:] == endfile:\n            lastfile = f\n            break\n    return lastfile\n\ndef getEPSCformLine(line):\n    error = 0\n    if ' \\t' in line:\n        linespl = line.split(' \\t')\n        if len(linespl) == 4:\n            ep = linespl\[1].split('.')\[0]\n            sc = linespl\[1].split('.')\[1]\n            nkfile = linespl\[2]\n            return \[ep,sc,nkfile]\n        else:\n            error = 1\n    else:\n        error = 1\n    if error == 1:\n        raise Exception('For This Operation Copy to Buffer One Line from List')\n\ndef findLastNKFile(checkFile=0):\n    node = nuke.thisNode()\n    line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n    epscnk = getEPSCformLine(line)\n    ep = epscnk\[0]\n    sc = epscnk\[1]\n    dirNk = getVariable(node, 3 ,ep ,sc,1)\n    if os.path.isdir(dirNk):\n        LastFile = getlastFile(dirNk)\n        if checkFile==1 or checkFile==0:\n            if not os.path.isfile(dirNk+'/'+LastFile):\n                raise Exception('Files not Found:\\n'+dirNk+'\\nUse Create New Project')\n        askopen = 0\n        if epscnk\[2] == LastFile:\n            #this LastFile in line\n            askopen = nuke.ask('This NK file is Last.\\nSource NK?\\n\\n'+LastFile)\n            #return epscnk\[2]\n        else:\n            #set newLineLog \n            nl = addLineLog(node, line, newNKName=LastFile)\n            searchListScriptManager(nl)\n            #askopen = nuke.ask('Founded New Version NK.\\nSource NK?\\n\\n'+LastFile)\n            #return LastFile\n        #if askopen:\n        #    print 'Find and Open'\n        #    OpenWith()\n        return LastFile\n    else:\n        raise Exception('Folder not Found:\\n'+dirNk)\n\ndef setLastNK():\n    node = nuke.thisNode()\n    line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n    epscnk = getEPSCformLine(line)\n    pathfiles = getVariable(node,3,epscnk\[0],epscnk\[1],1)\n    if os.path.isdir(pathfiles):\n        #pathfiles = '//server-3d/project/UrfinJuse/scenes/ep121/ep121sc46/compose/nuke'\n        os.chdir(pathfiles)\n        files = filter(os.path.isfile, os.listdir(pathfiles))\n        files.sort(key=lambda x: os.path.getmtime(x))\n        files.reverse()\n        strlist = ''\n        for item in files:\n            if os.path.isfile(pathfiles+'/'+item):\n                strlist += ' '+item.replace(' ','__')\n        p = nuke.Panel('Set Current File')\n        p.addEnumerationPulldown('Select File:', strlist)\n        p.addButton('Cancel')\n        p.addButton('OpenAsNewSession')\n        result = p.show()\n        if result != 0:\n            userChoise = p.value('Select File:')\n            userChoise = userChoise.replace('__',' ')\n            if epscnk\[2] == userChoise:\n                #this LastFile in line\n                OpenWith(1)\n                return epscnk\[2]\n            else:\n                #set newLineLog \n                nl = addLineLog(node, line, newNKName=userChoise)\n                QtGui.QApplication.clipboard().setText(nl.replace('  ->  ',' \\t'))\n                searchListScriptManager(nl)\n                OpenWith(1)\n                return userChoise\n    else:\n        raise Exception('Folder not Found:\\n'+pathfiles)\n\ndef CheckID(f):\n    error = 0\n    if f.isdigit():\n        return f\n    else:\n        if f.count('.') == 1:\n            if f.split('.')\[0].isdigit() and f.split('.')\[1].isdigit():\n                if len(f.split('.')\[1]) == 1:\n                    return f\n                else:\n                    error = 1\n            else:\n                error = 1\n        else:\n            error = 1\n    if error == 1:\n        raise Exception('Set ID to Number or Float (example: 22.1)\\n\\nwith one digit after the point\\n\\nCurrent: ' + str(f))\n\ndef setStatus(thisSession=0,newID=0,newDuration=0):\n    node = nuke.thisNode()\n    if thisSession == 0:\n        line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n        epscnk = getEPSCformLine(line)\n    else:\n        epscnk = getEPSCCurent(1)\n        line = epscnk\[3]\n    if newID == 0 and newDuration == 0:\n        note = node\['note_line'].getText()\n        nl = addLineLog(node,line,note)\n        searchListScriptManager(nl)\n    else:\n        if newID == 1:\n            checkedID = CheckID(node\['inputID'].getValue())\n            idfromParm = str(int(10*float(checkedID))).zfill(4)\n            note = 'NEWID='+ idfromParm\n            nl = addLineLog(node,line,note)\n            searchListScriptManager(nl)\n        if newDuration == 1:\n            dpxfolder = getVariable(node,6,epscnk\[0],epscnk\[1],1)\n            numframes = 0\n            for item in os.listdir(dpxfolder):\n                if item\[-3:] == 'dpx':\n                    numframes+=1\n            note = 'NEWDURATION='+ str(numframes).zfill(4)\n            nl = addLineLog(node,line,note)\n            searchListScriptManager(nl)\n\ndef getEPSCCurent(astuple=0):\n    f = nuke.root().name()\n    epsc = ''\n    nkname = f.split('/')\[-1]\n    for el in f.split('/'):\n            if 'ep' in el and 'sc' in el:\n                if epsc == '':\n                    epsc = el.replace('ep','').replace('sc','.')\n    ep = epsc.split('.')\[0]\n    sc = epsc.split('.')\[1]\n    oldline = 'ts \\t'+ep+'.'+sc+' \\t'+nkname+' \\toldoperation'\n    epscnk = \[ep,sc,nkname,oldline]\n    if astuple == 1:\n        return epscnk\n    return epsc+ ' '\n\ndef createNewProjectOrAddCreated(ForceCreateNew=0):\n    node = nuke.thisNode()\n    nep = node\['new_ep'].getText()\n    nsc = node\['new_sc'].getText()\n    notdirandsc = 0\n    if nep != '' or nsc != '':\n        dirNK = getVariable(node,3,nep,nsc)\n        oldline = '000|ts|0000 \\t'+nep+'.'+nsc+' \\told.nk \\toldoperation'\n        QtGui.QApplication.clipboard().setText(oldline)\n        if ForceCreateNew == 1:\n            if nuke.ask('Create newProject in:\\n' + dirNK + '\\n and Create Empty NK File?'):\n                if not os.path.isdir(dirNK):\n                    os.makedirs(dirNK)\n                nkname = 'ep'+nep+'sc'+nsc+'_v001.nk'\n                if os.path.isfile(dirNK+'/'+nkname):\n                    raise Exception ('The project is already created!\\nUse Add Created Project to List')\n                nl = addLineLog(node,oldline,newNKName=nkname)\n                searchListScriptManager(nl)\n                ##Create Template\n                nktemplate = getVariable(node,13)\n                #copyfile(nktemplate, dirNK+'/'+nkname)\n                tr = ''\n                with open(nktemplate, 'r') as t:\n                    for line in t:\n                        tr += line.replace('<EP>',nep).replace('<SC>',nsc)\n                with open(dirNK+'/'+nkname, 'w') as f:\n                    f.write(tr)\n        else:# add to List Created\n            founded = ''\n            if os.path.isdir(dirNK):\n                founded = findLastNKFile(1)\n    else:\n        nuke.message('Enter the episode and the scene in the fields: <ep> and <sc>')\n\ndef DeleteFromList():\n   node = nuke.thisNode()\n   line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n   epscnk = getEPSCformLine(line)\n   nep = epscnk\[0]\n   nsc = epscnk\[1]\n   founded = \[]\n   if nep != '' or nsc != '':\n      passsearchpattern = ' ' + nep + '.'+ nsc + ' '\n      pathtoLog = getVariable(node,1)\n      if os.path.isdir(pathtoLog):\n         files = os.listdir(pathtoLog)\n         for f in files:\n            log = \[]\n            pathtofile = pathtoLog+'/'+f\n            if os.path.isfile(pathtofile):\n               with open(pathtofile, 'r') as f:\n                  lines = f.readlines()\n                  for l in lines:\n                     if passsearchpattern in l:\n                        founded.append(l)\n                     else:\n                        log.append(l)\n               with open(pathtofile, 'w') as f:\n                  f.writelines(log)\n         ##WRITEBACKUP:\n         pathtoLogBackup = pathtoLog + '/backup'\n         pathtoBackupFile = pathtoLogBackup + '/' + nep + '_' + nsc + '.backup'\n         if os.path.isfile(pathtoBackupFile):\n            with open(pathtoBackupFile, 'r+') as f:\n               f.writelines(founded)\n         else:\n            with open(pathtoBackupFile, 'w+') as f:\n               f.writelines(founded)\n      searchListScriptManager()\n   else:\n      nuke.message('Enter the episode and the scene in the fields: <ep> and <sc>')\n\ndef ffmpegCommand(in_path, path_to_file):\n    #\\\\dataserver\\Project\\lib\\soft\\ffmpeg\\bin\n    ffmpeg_command = '//dataserver/Project/lib/soft/ffmpeg/bin/ffmpeg  -r 24 -i ' + in_path + r' -c:v libxvid -q:v 0 -b 100000 -vf colormatrix=bt601:bt709 -g 1 -r 24 ' + path_to_file\n    #ffmpeg_command = '//server-3d/project/lib/soft/ffmpeg/bin/ffmpeg  -r 24 -i ' + in_path + r' -c:v mpeg4 -vtag xvid  -q:v 1 -b:v 555k -vf colormatrix=bt601:bt709 -g 1 -r 24 ' + path_to_file\n    #args = \['//server-3d/project/lib/soft/ffmpeg/bin/ffmpeg', '-r', '24', '-i', in_path , '-c:v', 'libxvid', '-q:v', '0', '-b','50000', '-vf', 'colormatrix=bt601:bt709', '-g', '1', '-r', '24', path_to_file]\n    #subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n    #cmd = 'ffmpeg_command \{\}'.format(ffmpeg_command)\n    print '--------------------------------------------------'\n    print ffmpeg_command\n    f_ffmpeg = subprocess.call(ffmpeg_command)\n\ndef CreateStills(forthissseeion=0,line=''):#Create for episode incremental frames sequence And DailiesStills For SpreadSheet\n   node = nuke.thisNode()\n   addline = 0\n   if line == '':\n      addline = 1\n      if forthissseeion==0:\n         line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n         epsc = getEPSCformLine(line)\n      else: \n         epsc = getEPSCCurent(1)\n         line = epsc\[3]\n   else:\n      epsc = getEPSCformLine(line)\n   pngFolder = getVariable(node,4,epsc\[0],epsc\[1])\n   pngIncrementMontageFolder = '/'.join(pngFolder.split('/')\[:-3])+'/montage/incrementMontageSeq/'\n   mID = line.split(' \\t')\[0].split('|')\[0]\n   fLenght = line.split(' \\t')\[0].split('|')\[-1]\n   if mID != '0000' or fLenght != '0000':\n       intframes = int(fLenght)\n       ##Create Dailie Still For SpreadSheet\n       dailiesFolder = getVariable(node,5,epsc\[0],epsc\[1])\n       dailiStillsFolder = dailiesFolder + '/stills/'\n       ##Create 10frames\n       if mID != '0000' and fLenght !='0000':\n          if not os.path.isdir(pngIncrementMontageFolder):\n             os.makedirs(pngIncrementMontageFolder)\n          incrementfilenums = \[1,int(intframes*0.111),int(intframes*0.222),int(intframes*0.333),int(intframes*0.444),int(intframes*0.555),int(intframes*0.666),int(intframes*0.777),int(intframes*0.888),intframes]\n          i = (int(mID)-1)*10\n          for frame in range(0,9):\n             if incrementfilenums\[frame] == 0: incrementfilenums\[frame] = 1\n          for frame in incrementfilenums:\n             filePNGfrom = pngFolder + '/ep' + epsc\[0] + 'sc' + epsc\[1] + '_left_' + str(frame).zfill(4) + '.png'\n             frameinIncriment = i+1\n             filePNGto = pngIncrementMontageFolder + 'ep' + epsc\[0] + '_' + str(frameinIncriment).zfill(4) + '.png'\n             i+=1\n             copyfile(filePNGfrom, filePNGto)\n          if not os.path.isdir(dailiStillsFolder):\n             os.makedirs(dailiStillsFolder)\n          midFrame = 1#FirstFrame intframes/2\n          filePNGto = dailiStillsFolder + 'ep'+ epsc\[0] +'sc'+ epsc\[1] +'_still_oldv001.png'\n          filePNGfrom = pngFolder + '/ep' + epsc\[0] + 'sc' + epsc\[1] + '_left_' + str(int(midFrame)).zfill(4) + '.png'\n          stills = os.listdir(dailiStillsFolder)\n          if len(stills) == 0:\n             copyfile(filePNGfrom, filePNGto)\n             #Copy Mid Still\n          else:\n             ##Rename Stills in folder with shifft number AndCopy oldv001\n             for st in reversed(stills):\n                number = st.split('.')\[0]\[-3:]\n                NewNum = str(int(number)+1).zfill(3)\n                newName = st.replace(number,NewNum)\n                os.rename(dailiStillsFolder+st,dailiStillsFolder+newName)\n                copyfile(filePNGfrom, filePNGto)\n       else:\n          raise Exception('For this Operation need Set ID and Frame Duration')\n\n       if addline == 1:\n          nl = addLineLog(node,line,'COPYSTILLS')\n          searchListScriptManager(nl)\n   else:\n       return 0\n\ndef createAVI(Choise=0, forthissseeion=0,Stills=0):\n    node = nuke.thisNode()\n    if forthissseeion==0:\n        line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n        epsc = getEPSCformLine(line)\n    else: \n        epsc = getEPSCCurent(1)\n        line = epsc\[3]\n    if Stills == 1:\n        CreateStills(0,line)\n    pngFolder = getVariable(node,4,epsc\[0],epsc\[1])\n    dailieFolder = getVariable(node,5,epsc\[0],epsc\[1])\n    dailiePathName = ''\n    #Choise = int(node\['createavi_menu'].getValue())\n    '''if Choise == 0 or Choise == 1: #Create Dalise\n        renderfiles = os.listdir(pngFolder)\n        renderfiles = sorted(renderfiles)\n        firstframe = ''\n        for f in renderfiles:\n            if firstframe == '':\n                if f\[-3:] == 'png' or f\[-3:] == 'jpg':\n                    firstframe = f\n                    break\n        infile = pngFolder +'/'+ firstframe.replace('0001','%04d')\n        dailiePathName = ''\n        if os.path.isdir(dailieFolder) == False:\n            os.mkdir(dailieFolder)\n            dailiePathName =dailieFolder+ '/ep' + epsc\[0] + 'sc' + epsc\[1] + '_dailies_v001.avi'\n        else:\n            lastdailie = getlastFile(dailieFolder,endfile='avi')\n            if lastdailie != '':\n                lastnumber = ''\n                ifnumber = 0\n                for ch in lastdailie\[::-1]:\n                    if ch.isdigit():\n                        if ifnumber == 0 or ifnumber == 1:\n                           ifnumber = 1\n                           lastnumber = ch + lastnumber\n                    else: #Bukva\n                        if ifnumber == 1:\n                           break\n                padding = len(lastnumber)           \n                s = int(lastnumber)+1\n                newnumber = str(s).zfill(padding)\n                lastdailie = lastdailie.replace(lastnumber,newnumber)\n                dailiePathName = dailieFolder+'/'+lastdailie\n            else:\n                dailiePathName =dailieFolder+ '/ep' + epsc\[0] + 'sc' + epsc\[1] + '_dailies_v001.avi'\n                newnumber = '001'\n        print infile,dailiePathName\n        ffmpegCommand(infile, dailiePathName)'''\n    if Choise == 1 or Choise == 2: ##CreateUncompress\n        #get_dpx sequence\n        if int(node\['stereo'].getValue()) == 0:\n            dpxdir = getVariable(node,6,epsc\[0],epsc\[1],1)\n            avifull_path = getVariable(node,7,epsc\[0],epsc\[1],0)\n            \n            #avifull_path = '\\\\'+avifull_path.replace('/','\\\\')\n            dailiePathName = avifull_path\n            print dailiePathName\n            print dpxdir\n            lReader = LoadSequenceFromDir(dpxdir,'tiff')\n            print lReader\n            #dpxdir = '\\\\'+dpxdir.replace('/','\\\\')\n            first = int(lReader\[0]\['first'].getValue())\n            last = int(lReader\[0]\['last'].getValue())\n            res_x = int(node\['res_x'].getValue())\n            res_y = int(node\['res_y'].getValue())\n            fps = int(nuke.root()\['fps'].getValue())\n            TS = timeStamp()\n            ts = str(TS)\n            datatime = ts\[6:8]+':'+ts\[8:10]+' '+ts\[4:6]+'_'+ts\[2:4]+'_'+ts\[0:2]\n            TITLE = 'MLS ep'+epsc\[0]+'sc'+epsc\[1] +' '+ datatime\n            if os.path.isfile(avifull_path):\n                os.remove(avifull_path)\n            if Choise == 1:\n                template_text = r'\"\\\\dataServer\\Project\\lib\\soft\\Pdplayer64_1.07\\pdplayer64.exe\" --timeline='+ str(last+1) + r' --wa_begin='+str(first)+r' --wa_end='+ str(last+1) + r' --time=33 --back_color=0,0,0 --safe_area=none --mask_type=none --mask_size='+ str(res_x) + r','+ str(res_y) + r' --fps='+str(fps)+r' --zoom=100 --pan=0,0 --frame_base=0 --global_aspect=1 --apply_transforms_to_mask=0 --stereo_view=left \"'+dpxdir+r'\" --name=\"ep31sc01_left\" --begin=1 --alpha=ignore --color_space=default --disable_caching=0 --new_text_layer='+ str(res_x) + r','+ str(res_y) + r','+ str(last+1) + r' --text_align_x=left --text_align_y=bottom --text_font=\"Arial\" --text_size=24 --text_bold=0 --text_italic=0 --text_color=255,255,255 --text_outline_color=none --text_shadow_color=none --text_back_color=none --text_back_cover_layer=0 --text=0,0,\"'+ TITLE + r'\" --name=\"text_name\" --position=200,-80 --alpha=pm --color_space=default --new_text_layer='+ str(res_x) + r','+ str(res_y) + r','+ str(last+1) + r' --text_align_x=right --text_align_y=bottom --text_font=\"Arial\" --text_size=24 --text_bold=0 --text_italic=0 --text_color=255,255,255 --text_outline_color=none --text_shadow_color=none --text_back_color=none --text_back_cover_layer=0 --text=0,0,\"\{timeline:frame\}\" --name=\"ti_text_name\" --position=-241,-80 --alpha=pm --color_space=default  --save_mask_as_sequence='+avifull_path+', --exit'\n            if Choise == 2: # Make NoTEXT\n                template_text = r'\"\\\\dataServer\\Project\\lib\\soft\\Pdplayer64_1.07\\pdplayer64.exe\" --timeline='+ str(last+1) + r' --wa_begin='+str(first)+r' --wa_end='+ str(last+1) + r' --time=33 --back_color=0,0,0 --safe_area=none --mask_type=none --mask_size='+ str(res_x) + r','+ str(res_y) + r' --fps='+str(fps)+r' --zoom=100 --pan=0,0 --frame_base=0 --global_aspect=1 --apply_transforms_to_mask=0 --stereo_view=left \"'+dpxdir+r'\" --name=\"ep31sc01_left\" --begin=1 --alpha=ignore --color_space=default --disable_caching=0 --save_mask_as_sequence='+avifull_path+', --exit'\n            print 'Generate Avi ------------------- :'\n            print template_text\n            p = subprocess.Popen(template_text, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n            print p\n        #with nuke.root().begin():\n        #    op = getVariable(node,11)\n        #    #path_toVdpx = op + 'ep' + epsc\[0] + '/render_dpx/ep' + epsc\[0] + 'sc' + epsc\[1] + '/ep' + epsc\[0] + 'sc' + epsc\[1] + '_%V/ep' + epsc\[0] + 'sc' + epsc\[1] + '_%v_%04d.dpx'\n        #    path_toVdpx = op + 'ep' + epsc\[0] + '/render_dpx/ep' + epsc\[0] + 'sc' + epsc\[1] + '/ep' + epsc\[0] + 'sc' + epsc\[1] + '_%04d.dpx'\n        #    dailiePathName = op + 'ep' + epsc\[0] + '/ep' + epsc\[0] + 'sc' + epsc\[1] + '.avi'\n        #    w_node = nuke.createNode('Write')\n        #    w_node.knob('file').setValue(path_toVdpx)\n        #    import nukeautomation.dailies_manager.dailies_gui as dg;reload(dg);dg.convert_from_nuke_node()\n        #    nuke.delete(w_node)\n    if Choise == 0:\n        if Stills==1:\n            nl = addLineLog(node,line,'CREATED_DAILIES+AVI+STILLS: v'+newnumber)\n        else:\n            nl = addLineLog(node,line,'CREATED_DAILIES+AVI: v'+newnumber)\n    #if Choise == 1:\n    #    nl = addLineLog(node,line,'CREATED_DAILIES: v'+newnumber)\n    if Choise == 2 or Choise == 1:\n        nl = addLineLog(node,line,'CREATED_AVI')\n    if nuke.ask('Created Dailies!\\nPath to avi File:\\n'+dailiePathName+'\\n\\n copied to Buffer\\nOpen Folder with AVI?\\n'):\n        pf = '/'.join(avifull_path.split('/')\[:-1])\n        if os.path.isdir(pf):\n            outFolder = 'file:' + pf\n            print outFolder\n            import webbrowser as wb\n            wb.open(outFolder)\n        else:\n            nuke.message('Not found this Folder:\\n' + pf)\n    node.begin()\n    nuke.delete(lReader\[0])\n    searchListScriptManager(nl)\n    QtGui.QApplication.clipboard().setText('\\\\'.join(avifull_path.split('/')))\n\ndef OpenFolder(Choise=0,forthissseeion=0):\n    node = nuke.thisNode()\n    if forthissseeion==0:\n        line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n        epsc = getEPSCformLine(line)\n    else: \n        epsc = getEPSCCurent(1)\n        line = epsc\[3]\n    #Choise = int(node\['folder_menu'].getValue())\n    path = ''\n    if Choise == 0:\n        path = getVariable(node,10,epsc\[0],epsc\[1])\n    elif Choise == 1:\n        path = getVariable(node,3,epsc\[0],epsc\[1])\n    elif Choise == 2:\n        path = getVariable(node,6,epsc\[0],epsc\[1])\n    elif Choise == 3:\n        path = getVariable(node,7,epsc\[0],epsc\[1])\n    elif Choise == 4:\n        path = getVariable(node,12,epsc\[0],epsc\[1])\n    elif Choise == 5:\n        path = getVariable(node,4,epsc\[0],epsc\[1])\n    elif Choise == 6:\n        path = getVariable(node,5,epsc\[0],epsc\[1])\n    if os.path.isdir(path):\n        outFolder = 'file:' + path\n        print outFolder\n        import webbrowser as wb\n        wb.open(outFolder)\n    else:\n        nuke.message('Not found this Folder:\\n' + path)\n\ndef getFirstNumFrameFile(filename):\n    numer = 0\n    firstframe = ''\n    for ch in filename\[::-1]:\n        if numer == 0 or ch.isdigit():\n            if ch.isdigit():\n                firstframe = ch + firstframe\n                numer = 1\n        else:\n            break        \n    return firstframe\n\ndef LoadSequenceFromDir(directory,endfile):\n    readers = \[]\n    len_ext = len(endfile)\n    with nuke.root().begin():\n        files = os.listdir(directory)\n        count = 1\n        counts = \[]\n        sequences = \[]\n        WithoutDigitName = ''\n        seqfiles = \[]\n        for f in sorted(files):\n            if endfile == f\[-len_ext:]:\n                WithoutDigitName = ''.join(\[i for i in f if not i.isdigit()])\n                if WithoutDigitName not in  sequences:\n                    if len(sequences) > 0:\n                        count = 1\n                    sequences.append(WithoutDigitName)\n                    seqfiles.append(f)\n                    counts.append(count)\n                else:\n                    count += 1\n                    counts.append(count)\n        if len(counts) > 0:\n            numberofframes = max(counts)\n            for seqF in seqfiles:\n                firstFrame = getFirstNumFrameFile(seqF)\n                intFF = int(firstFrame)\n                intLF = int(firstFrame)+(numberofframes-1)\n                padding = len(firstFrame)\n                read = nuke.createNode('Read')\n                read\['file'].fromUserText(directory+'/'+seqF.replace(firstFrame,'%0'+str(padding)+'d'))\n                read\['first'].setValue(intFF)\n                read\['last'].setValue(intLF)\n                readers.append(read)\n    return readers\n\ndef getDirsWithEXR(directory,dirlist):\n    for item in os.listdir(directory):\n        itempath = directory+'/'+item\n        if os.path.isdir(itempath):\n            rawcontentdir = str(os.listdir(itempath))\n            if 'exr' in rawcontentdir:\n                dirlist.append(itempath)\n            getDirsWithEXR(itempath,dirlist)\n\ndef LoadIntoNuke(Choise=0,forthissseeion=0):\n    node = nuke.thisNode()\n    if forthissseeion==0:\n        line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n        epsc = getEPSCformLine(line)\n    else: \n        epsc = getEPSCCurent(1)\n        line = epsc\[3]\n    #Choise = int(node\['load_menu'].getValue())\n    if Choise == 0:#LOAD DPX\n        if int(node\['stereo'].getValue()) == 0:\n            dpxdir = getVariable(node,6,epsc\[0],epsc\[1],1)\n            print dpxdir\n            lReader = LoadSequenceFromDir(dpxdir,'tiff')\n        else:\n            dpxdirleft = getVariable(node,6,epsc\[0],epsc\[1],1)\n            dpxdirright = getVariable(node,7,epsc\[0],epsc\[1],1)\n            lReader = LoadSequenceFromDir(dpxdirleft,'tiff')\n            rReader = LoadSequenceFromDir(dpxdirright,'tiff')\n            with nuke.root().begin():\n                nuke.selectAll()\n                nuke.invertSelection()\n                lReader\[0].setSelected(1)\n                rReader\[0].setSelected(1)\n                nuke.createNode('JoinViews')\n    if Choise == 1:#LOAD PNG\n        PNGdir = getVariable(node,4,epsc\[0],epsc\[1],1)\n        readers = LoadSequenceFromDir(PNGdir,'png')\n        with nuke.root().begin():\n            nuke.selectAll()\n            nuke.invertSelection()\n            readers\[0].setSelected(1)\n            readers\[1].setSelected(1)\n            nuke.createNode('JoinViews')\n    if Choise == 2:#LOAD LastDailies\n        Dailiesdir = getVariable(node,5,epsc\[0],epsc\[1],1)\n        lastfile = getlastFile(Dailiesdir, 'avi')\n        with nuke.root().begin():\n            if lastfile != '':\n                read = nuke.createNode('Read')\n                read\['file'].fromUserText('mov64:'+Dailiesdir+'/'+lastfile)\n                read\['first'].setValue(1)\n                l = read\['last'].getValue()\n                read\['last'].getValue(int(l)+1)\n            else:\n                nuke.message('Dailies Not Found')\n    if Choise == 3: #Load OutputAVI\n        leftrightAVI = \[getVariable(node,8,epsc\[0],epsc\[1],1),getVariable(node,9,epsc\[0],epsc\[1],1)]\n        readers = \[]\n        with nuke.root().begin():\n            for avi in leftrightAVI:\n                read = nuke.createNode('Read')\n                read\['file'].fromUserText(avi)\n                read\['first'].setValue(1)\n                l = read\['last'].getValue()\n                read\['last'].getValue(int(l)+1)\n                readers.append(read)\n            nuke.selectAll()\n            nuke.invertSelection()\n            for r in readers:\n                r.setSelected(1)\n            nuke.createNode('JoinViews')\n    if Choise == 4: #Load Sources\n        sourcespath = getVariable(node,10,epsc\[0],epsc\[1],1)\n        dirlist = \[]\n        getDirsWithEXR(sourcespath,dirlist)\n        with nuke.root().begin():\n            st = nuke.createNode('StickyNote')\n            firstXpos = int(st\['xpos'].getValue())\n            firstYpos = int(st\['ypos'].getValue())\n            nuke.delete(st)\n        readgroups = \[]\n        for exrdir in dirlist:\n            readgroups.append(\{'/'.join(exrdir.split('/')\[-3:]):LoadSequenceFromDir(exrdir,'exr')\})\n        lastgrp = ''\n        for group in readgroups:\n            key = group.keys()\[0]\n            listnodes = group.values()\[0]\n            st = nuke.createNode('StickyNote')\n            st\['xpos'].setValue(firstXpos)\n            st\['ypos'].setValue(firstYpos+175)\n            if 'left' in key.lower():\n                st\['tile_color'].setValue(1526684671)\n            if 'right' in key.lower():\n                st\['tile_color'].setValue(4250754815)\n            firstYpos = firstYpos+175\n            Yposnodes = firstYpos+50\n            if lastgrp.lower().replace('left','').replace('right','') == key.lower().replace('left','').replace('right',''):\n                firstYpos = firstYpos+100\n            st\['label'].setValue(key+':')\n            st\['note_font_size'].setValue(40)\n            xposoffsetnode = 0\n            lastgrp = key\n            i = 1\n            numnodes = len(listnodes)\n            for node in listnodes:\n                node\['xpos'].setValue(firstXpos+xposoffsetnode)\n                node\['ypos'].setValue(Yposnodes)\n                if i != numnodes:\n                    node\['postage_stamp'].setValue(0)\n                xposoffsetnode += 150\n                i+=1\n\ndef View(Choise=0,forthissseeion=0):\n    node = nuke.thisNode()\n    if forthissseeion==0:\n        line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n        epsc = getEPSCformLine(line)\n    else: \n        epsc = getEPSCCurent(1)\n        line = epsc\[3]\n    #Choise = int(node\['view_menu'].getValue())\n    if Choise == 0: ## ViewLastDilies\n        Dailiesdir = getVariable(node,5,epsc\[0],epsc\[1],1)\n        lastfile = getlastFile(Dailiesdir, 'avi')\n        pathToOpen = Dailiesdir+'/'+lastfile\n        winPathToOpen = '\\\\'.join(pathToOpen.split('/'))\n    elif Choise == 1: ## ViewPNG\n        pngdir = getVariable(node,4,epsc\[0],epsc\[1],1)\n        firstfile = os.listdir(pngdir)\[0]\n        pathToOpen = pngdir+'/'+firstfile\n        winPathToOpen = '\\\\'.join(pathToOpen.split('/'))\n    elif Choise == 2: ## ViewDPXLeft\n        dpxleftdir = getVariable(node,6,epsc\[0],epsc\[1],1)\n        firstfile = os.listdir(dpxleftdir)\[0]\n        pathToOpen = dpxleftdir+'/'+firstfile\n        winPathToOpen = '\\\\'.join(pathToOpen.split('/'))\n    elif Choise == 3: ## ViewDPXRight\n        dpxrightdir = getVariable(node,7,epsc\[0],epsc\[1],1)\n        firstfile = os.listdir(dpxrightdir)\[0]\n        pathToOpen = dpxrightdir+'/'+firstfile\n        winPathToOpen = '\\\\'.join(pathToOpen.split('/'))\n    elif Choise == 4: ## ViewAVILeft\n        AviLeftFile = getVariable(node,8,epsc\[0],epsc\[1],1)\n        winPathToOpen = '\\\\'.join(AviLeftFile.split('/'))\n    elif Choise == 5: ## ViewAVIRight\n        AviLeftFile = getVariable(node,9,epsc\[0],epsc\[1],1)\n        winPathToOpen = '\\\\'.join(AviLeftFile.split('/'))\n    else:\n        nuke.message('dontknow')\n    PATHLIN = toggleConvertPath(winPathToOpen)\n    pdpcmdcontent = '--back_color=0,0,0\\n--safe_area=none\\n--mask_type=none\\n--mask_size=2100,858\\n--fps=24\\n--frame_base=1\\n--global_aspect=1\\n--apply_transforms_to_mask=0\\n\\n\"'+ PATHLIN +'\"\\n--alpha=ignore\\n--color_space=default\\n--disable_caching=1\\n'\n    pdpFile = os.environ\['HOME']+'\\\\tempView.pdpcmd'\n    with open(pdpFile , 'w') as b:\n            b.write(pdpcmdcontent)\n    if os.path.isfile(winPathToOpen):\n        subprocess.Popen(\[\"//dataServer/Project/lib/soft/Pdplayer64_1.07/pdplayer64.exe\", pdpFile], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n        #subprocess.Popen(\['//server-3d/Project/lib/soft/Pdplayer/pdplayer.exe', pdpFile], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n        #os.startfile(winPathToOpen)\n    else:\n        nuke.message('Not Found File:\\n'+winPathToOpen)\n\ndef viewMultiple(Choise=0):\n   #0 - Appended LastDailies; 1 - Incremental Montage; 2 - SpreadSheet; 3 - as Layers\n   node = nuke.thisNode()\n   line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n   buff = line.split('\\n')\n   if Choise == 0: # View Last Dailies\n      pdcmd = '--back_color=0,0,0\\n--safe_area=none\\n--mask_type=none\\n--mask_size=2132,870\\n--fps=24\\n--zoom=40\\n--pan=-47,32\\n--frame_base=0\\n--global_aspect=1\\n--apply_transforms_to_mask=0\\n'\n      beginFrame = 1\n      for line in buff:\n         if line == '':\n            raise Exception('Copy Multiple Lines to Buffer')\n         duration = line.split(' \\t')\[0].split('|')\[-1]\n         epsc = getEPSCformLine(line)\n         Dailiesdir = getVariable(node,5,epsc\[0],epsc\[1],1)\n         lastfile = getlastFile(Dailiesdir, 'avi')\n         pathToOpen = Dailiesdir+'/'+lastfile\n         pdcmd += '\\n\"'+pathToOpen+'\"\\n'\n         pdcmd += '--begin='+str(beginFrame)+'\\n--alpha=ignore\\n'\n         beginFrame += int(duration)\n      pdcmd += '\\n--timeline='+str(beginFrame)+'\\n--wa_begin=1\\n--wa_end='+str(beginFrame)+'\\n--time=1'\n   if Choise == 1: #ViewIncrementalMontageOf Ep\n      epsc = getEPSCformLine(buff\[0])\n      pngFolder = getVariable(node,4,epsc\[0],epsc\[1],1)\n      pngIncrementMontageFolder = '/'.join(pngFolder.split('/')\[:-3])+'/montage/incrementMontageSeq/'\n      if os.path.isdir(pngIncrementMontageFolder):\n         files = os.listdir(pngIncrementMontageFolder)\n         firstfile = files\[0]\n         firstnum = firstfile\[-8:-4]\n         firstfile = files\[-1]\n         lastnum = firstfile\[-8:-4]\n         fullPathFile = pngIncrementMontageFolder + firstfile.replace(lastnum,'####')\n         pdcmd = '--back_color=0,0,0\\n--safe_area=none\\n--mask_type=none\\n--mask_size=2132,870\\n--fps=3\\n--zoom=40\\n--pan=-47,32\\n--frame_base=0\\n--global_aspect=1\\n--apply_transforms_to_mask=0\\n'\n         pdcmd += '\\n\"'+fullPathFile+'\"\\n'\n         pdcmd += '--begin='+str(int(firstnum))+'\\n--alpha=ignore\\n'\n         pdcmd += '\\n--timeline='+str(int(lastnum))+'\\n--wa_begin='+str(int(firstnum))+'\\n--wa_end='+str(int(lastnum))+'\\n--time='+str(int(firstnum))\n      else:\n         nuke.message('Not Folder For incremental Montage')\n   if Choise == 2: #View Spreadsheet of BufferLines\n      pdcmd = '--time=0\\n--back_color=0,0,0\\n--safe_area=none\\n--mask_type=none\\n--mask_size=2132,870\\n--fps=3\\n--zoom=20\\n--pan=-230,54\\n--frame_base=0\\n--global_aspect=1\\n--apply_transforms_to_mask=0\\n--stereo_view=left\\n--stereo_mode=anaglyph'\n      colums = 5\n      icol = 0\n      hoffset = 0\n      istring = 0\n      voffset = 0\n      for line in buff:\n         if line == '':\n            raise Exception('Copy Multiple Lines to Buffer')\n         epsc = getEPSCformLine(line)\n         Dailiesdir = getVariable(node,5,epsc\[0],epsc\[1],1)\n         dailieStillFile = Dailiesdir + '/stills/ep'+ epsc\[0] +'sc'+ epsc\[1] +'_still_oldv###.png'\n         pdcmd += '\\n\\n\"'\n         pdcmd += dailieStillFile\n         pdcmd +=  '\"\\n--alpha=ignore\\n--color_space=default\\n--disable_caching=0'\n         if icol < 5:\n            hoffset = 2132*icol\n            icol +=1\n         else:\n            istring += 1\n            voffset = 870 * istring\n            hoffset = 0\n            icol = 1\n         pdcmd += '\\n--position=' + str(hoffset) + ',' + str(voffset)\n      \n      pdcmd += '\\n\\n--timeline=10\\n--wa_begin=0\\n--wa_end=10'\n   if Choise == 3:#View All Dailies As Layers in PDPlayer\n      epsc = getEPSCformLine(buff\[0])\n      Dailiesdir = getVariable(node,5,epsc\[0],epsc\[1],1)\n      pdcmd = '--back_color=0,0,0\\n--safe_area=none\\n--mask_type=none\\n--mask_size=2132,870\\n--fps=24\\n--zoom=40\\n--pan=-47,32\\n--frame_base=1\\n--global_aspect=1\\n--apply_transforms_to_mask=0\\n'\n      for f in os.listdir(Dailiesdir):\n         if f\[-3:] == 'avi':\n            fpath = Dailiesdir+'/'+f\n            pdcmd += '\\n\"'\n            pdcmd += fpath\n            pdcmd +=  '\"\\n--alpha=ignore\\n--color_space=default\\n--disable_caching=0'\n   tmpDir = os.getenv('temp')\n   tmpFile = tmpDir + '\\\\temp.pdpcmd'\n   tmpFile = toggleConvertPath(tmpFile)\n   with open(tmpFile, 'w') as tmp:\n      tmp.write(pdcmd)\n   tmpFile = toggleConvertPath(tmpFile)\n   QtGui.QApplication.clipboard().setText(tmpFile)\n   if nuke.ask('Writed:\\n'+tmpFile+'\\nthis path copyed to clipboard\\n\\nRun PdPlayer?'):\n      #os.system('//server-3d/Project/lib/soft/Pdplayer/pdplayer.exe \"'+tmpFile+'\"')\n      subprocess.Popen(\[\"//dataServer/Project/lib/soft/Pdplayer64_1.07/pdplayer64.exe\", tmpFile], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n      #subprocess.Popen(\['//server-3d/Project/lib/soft/Pdplayer/pdplayer.exe', tmpFile], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n\ndef CopyToBufferThisSessionLine():\n    node = nuke.thisNode()\n    epsc = getEPSCCurent(1)\n    line = epsc\[3]\n    patternEPSC = ' '+epsc\[0]+'.'+epsc\[1]+' '\n    dirOfLogs = getVariable(node,1)\n    Founded = \{\}\n    for f in os.listdir(dirOfLogs):\n        filepath = dirOfLogs+'/'+f\n        if os.path.isfile(filepath):\n            with open(filepath, 'r') as infile:\n                for l in infile:\n                    if patternEPSC in l:\n                        el = l.split('  ->  ')\n                        ID = str(int(el\[0].split('_')\[0])-1000).zfill(4)\n                        DUR = el\[0].split('_')\[2]\n                        sep = ' \\t'\n                        readline = ID + '|00.00.0000|00:00|' + DUR + sep + el\[1] + sep + el\[2] + sep + el\[3]\n                        QtGui.QApplication.clipboard().setText(readline)\n                        break\n                        \ndef CopyToBuffer(Choise=0,forthissseeion=0):\n   node = nuke.thisNode()\n   if forthissseeion==0:\n      line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n      epsc = getEPSCformLine(line)\n   else: \n      epsc = getEPSCCurent(1)\n      line = epsc\[3]\n   #Choise = int(node\['copy_menu'].getValue())\n   if Choise == 0 or Choise == 1: # Last Dailies copy to Buffer\n      Dailiesdir = getVariable(node,5,epsc\[0],epsc\[1])\n      lastfile = getlastFile(Dailiesdir, 'avi')\n      pathToOpen = Dailiesdir+'/'+lastfile\n      if Choise == 1:\n         pathToOpen = '\\\\'.join(pathToOpen.split('/'))\n      QtGui.QApplication.clipboard().setText(pathToOpen)\n   if Choise == 2 or Choise == 3: # nkFile copy to Buffer\n      nkdir = getVariable(node,3,epsc\[0],epsc\[1])\n      nkfile = epsc\[2]\n      pathToOpen = nkdir+'/'+nkfile\n      if Choise == 3:\n         pathToOpen = '\\\\'.join(pathToOpen.split('/'))\n      QtGui.QApplication.clipboard().setText(pathToOpen)\n   if Choise == 4: #find TablePath\n      patternEPSC = ' '+epsc\[0]+'.'+epsc\[1]+' '\n      dirOfLogs = getVariable(node,1)\n      Founded = \{\}\n      for f in os.listdir(dirOfLogs):\n         filepath = dirOfLogs+'/'+f\n         if os.path.isfile(filepath):\n            with open(filepath, 'r') as infile:\n               for l in infile:\n                  if patternEPSC in l:\n                     if 'table:' in l:\n                        key = l.split('_')\[1]\n                        Founded\[-int(key)] = l\n      if len(Founded) > 0: \n         lasttableStatusByDate = sorted(Founded)\[0]\n         lastline = Founded\[lasttableStatusByDate]\n         link = lastline.split('  ->  ')\[-1].split(' ')\[1:]\n         QtGui.QApplication.clipboard().setText(' '.join(link)\[:-1])\n      else:\n         nuke.message('Link to Table Not Found')\n\ndef toggleConvertPath(inp=''):\n    if inp == '':\n       line = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n    else: \n       line = inp\n    if line\[0] == '/': #confert to win \\\n        newline = '\\\\'.join(line.split('/'))\n    else: #confert to unix \n        newline = '/'.join(line.split('\\\\'))\n    if inp == '':\n        QtGui.QApplication.clipboard().setText(newline)\n    return newline\n\ndef Snippet(mode=0,recursive=0):\n    node = nuke.thisNode()\n    if recursive== 1:\n        node = nuke.toNode('Manager')\n    snippetDirs = getVariable(node,2) #withoutmirror\n    userName = getVariable(node,0)\n    srch = node\['srch_snippet'].getValue()\n    text = ''\n    Folder_List = \[]\n    if mode==0: #FindAllSnipets (Restore)\n        for d in snippetDirs:\n            if d != '':\n                if os.path.isdir(d):\n                    for folder in os.listdir(d):\n                        if folder not in Folder_List:\n                            if srch == '': #Find All\n                                Folder_List.append(d+folder)\n                            else:\n                                if srch.lower() in '_'.join(folder.lower().split('_')\[:-1]):\n                                    Folder_List.append(d+folder)\n                                else:\n                                    continue\n                else:\n                    pass\n            else:\n                pass\n        for f in Folder_List:\n            #get descriptionFile\n            name = ''\n            for i in os.listdir(f):\n                if i\[0] == '#':\n                    name = i\n                    break\n                else:\n                    name = '#Not Description'\n            if pathToLinnux('LINUX?') == 1:\n                text += name + '\\n'\n            else:\n                text += name.decode('cp1251').encode('utf8', 'ignore') + '\\n'\n            if node\['ShowStickyVersion'].getValue() == 0:\n                text += f + '/nodes.nk'\n            else:\n                text += f + '/nodes_sticky.nk'\n            text += '\\n\\n'\n        node\['snippetList'].setText(text)\n        return\n    elif mode==1: #SaveSnippet Open Panel (Name Description)\n        nuke.root().begin()\n        if len(nuke.selectedNodes()) != 0:\n            p = nuke.Panel('New Snippet')\n            p.addSingleLineInput('NameTags:','')\n            p.addNotepad('Description:','')\n            p.addButton('Cancel')\n            p.addButton('Create New Snippet')\n            result = p.show()\n            if result == 1:\n                desciption = p.value('Description:')\n                name = p.value('NameTags:')\n                chars_to_remove = \['.', '?', '|', '\\\\', '/', '<' , '>' , '*', '\"' , ':']\n                for ch in chars_to_remove:\n                    desciption = desciption.replace(ch, '')\n                    name = name.replace(ch, '').upper()\n                desciption = desciption.lower()\n                name = name.upper()\n                desciption = desciption.replace('\\n','_^')\n                time = timeStamp()\n                #createDirs\n                for d in snippetDirs:\n                    if d != '':\n                        snippetpath =  d+name.replace(' ','_')+'_'+time + '/'\n                        os.makedirs(snippetpath)\n                        open(snippetpath+'#'+name+'  -  '+desciption.decode('utf8', 'ignore')+' @'+userName,'a').close()\n                        nuke.nodeCopy(snippetpath+'nodes_sticky.nk')\n                        for n in nuke.selectedNodes():\n                            if n.Class() == 'StickyNote':\n                                n.setSelected(0)\n                        nuke.nodeCopy(snippetpath+'nodes.nk')\n                nuke.root().end()\n                Snippet(mode=0,recursive=1)\n    elif mode == 2: #DeleteDirWithSnipet\n        p = str(QtGui.QApplication.clipboard().text().encode('utf8', 'ignore'))\n        f = '/'.join(p.split('/')\[:-1])\n        if os.path.isdir(f):\n            for s in snippetDirs:\n                if os.path.isdir(s):\n                    if s in f:\n                        a = nuke.ask('Delete Snippet Folder?\\n\\n'+f)\n                        if a==1:\n                            import shutil\n                            shutil.rmtree(f)\n                            Snippet()"
}
end_group
